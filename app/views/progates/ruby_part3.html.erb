<div style="padding: 20px 0 20px 0;">
	Home→<%= link_to 'Home', root_path %>
	<%= link_to 'Progate/HTML&CSS初級編', htmlcss_first_path %>
	first→<%= link_to 'Progate/Rubyコース1', ruby_path %>
	prev→<%= link_to 'Progate/Rubyコース2', ruby_part2_path %>
</div>

<h1>Ruby　コース3</h1>


<div style="padding: 100px 0 100px 0;">
	メソッドを学ぼう
	このレッスンでは、プログラミングにおいて必須の知識である「メソッド」について学んでいきます。
	新しく覚えることも多いですが、焦らず少しずつ理解していきましょう！
</div>

<div style="padding: 100px 0 100px 0;">
	メソッドとは、複数の処理を1つにまとめたものです。
	図では、「あいさつをする」「名前を言う」という2つの処理を「introduceメソッド」としてまとめています。
	実際のメソッドの書き方について、次のスライドから学んでいきましょう。
	<br><%= image_tag '/assets/メソッドとは1.png' %><%= image_tag '/assets/メソッドとは2.png' %><br>
	まずは、メソッドをどのようにつくるか見ていきましょう。
	左の図のように、「def メソッド名」と「end」の間に、まとめたい処理を書くことでメソッドをつくることができます。このことを「メソッドを定義する」と言います。
	右の図では、2つの出力を行う、introduceメソッドを定義しています。
	<br><%= image_tag '/assets/メソッドとは-メソッドの定義1.png' %><%= image_tag '/assets/メソッドとは-メソッドの定義2.png' %><br>
	メソッドは、定義するだけでは実行されません。
	図のように、「メソッド名」とすることで実行できます。メソッドを実行することを、「メソッドを呼び出す」と言います。
	<br><%= image_tag '/assets/メソッドとは-メソッドとは-メソッドの呼び出し1.png' %><%= image_tag '/assets/メソッドとは-メソッドとは-メソッドの呼び出し2.png' %><br>
	[index.rb]<br>
	def introduce<br>
	  puts "こんにちは"<br>
	  puts "私はにんじゃわんこです"<br>
	  # ②今の状態でコードを実行すると、2つの出力が確認できるはずです。今度はメソッドの処理を追加してみましょう。<br>
	  # ③出力を追加してください　introduceメソッドに、14歳ですと出力する処理を追加してください。<br>
	  puts "14歳です"<br>
	end<br>
	puts "-----自己紹介-----"<br>
	# ①introduceメソッドを呼び出してください<br>
	introduce<br>
</div>

<div style="padding: 100px 0 100px 0;">
	それでは今回は、メソッドを自分で1から作ってみましょう。
	大事なのは「def メソッド名」と「end」です。
	Ruby 学習コースⅠで学んだ「インデント」を使って、見やすいコードを書きましょう。
	<br><%= image_tag '/assets/メソッドを自作しよう.png' %><br>
	[index.rb]<br>
	# ①以下の2つの文を出力する　print_infoメソッドを定義してください。1つ目の文：わんこでんきへようこそ！　2つ目の文：今日はヘッドホンがセール中です！<br>
	# ②print_infoメソッドを定義してください<br>
	def print_info<br>
	  puts "わんこでんきへようこそ！"<br>
	  puts "今日はヘッドホンがセール中です！"<br>
	end<br>
	# ③print_infoメソッドを呼び出してください<br>
	print_info<br>
</div>

<div style="padding: 100px 0 100px 0;">
	引数（ひきすう）とはメソッドに与える追加情報のようなものです。メソッドを呼び出すときに一緒に引数を渡すことで、メソッドの中でその値を利用することができます。
	<br><%= image_tag '/assets/引数とは-引数とは.gif' %><br>
	それでは、引数を渡せるメソッドを定義してみましょう。
	図のように、「def メソッド名(引数名)」とすることで、引数を指定することができます。
	<br><%= image_tag '/assets/引数を受け取るメソッドの定義1.png' %><%= image_tag '/assets/引数を受け取るメソッドの定義2.png' %><br>
	引数を渡してメソッドを呼び出すには、「メソッド名(値)」とします。
	メソッドは、指定した値を受け取り、その値は引数に代入されます。
	右の図では、introduceメソッドの呼び出し時に「"にんじゃわんこ"」という値が渡され、引数nameに代入されています。
	<br><%= image_tag '/assets/引数を受け取るメソッドの呼び出し1.png' %><%= image_tag '/assets/引数を受け取るメソッドの呼び出し2.png' %><br>
	引数はメソッド内では変数のように使用することができます。
	以下の図で、引数を受け取るメソッドの流れを確認しましょう。
	<br><%= image_tag '/assets/メソッド内で引数を使用する1.png' %><%= image_tag '/assets/メソッド内で引数を使用する2.png' %><br>
	[index.rb]<br>
	def introduce(name)<br>
	  puts "こんにちは"<br>
	  puts "私は#{name}です"<br>
	end<br>
	# ①引数を渡してメソッドを呼び出してください<br>
	introduce("にんじゃ")<br>
</div>

<div style="padding: 100px 0 100px 0;">
	メソッドを用いる場合と、用いない場合のコードを見比べてみましょう。
	左の図のようにメソッドを用いない場合には何度も同じような処理を書く必要がありますが、右の図のように共通の処理をメソッドにまとめることによって、シンプルに書くことができます。
	<br><%= image_tag '/assets/メソッドの利点1.png' %><%= image_tag '/assets/メソッドの利点2.png' %><br>
	引数について詳しく見ていきましょう。
	前のページでは、メソッドの引数として文字列を渡していましたが、文字列だけでなく数値などの値も引数として渡すことができます。
	<br><%= image_tag '/assets/様々な引数1.png' %><%= image_tag '/assets/様々な引数2.png' %><br>
	引数のあるメソッドは、引数を渡さずに呼び出すことができません。
	引数を渡さないで呼び出そうとすると、エラーになってしまいますので注意しましょう。
	<br><%= image_tag '/assets/呼び出し時の注意1.png' %><%= image_tag '/assets/呼び出し時の注意2.png' %><br>
	[index.rb]<br>
	# ①print_infoメソッドを定義してください ただし、引数名はitemとしてください。<br>
	# ②print_infoメソッドで、以下の2つの文を出力するようにしてください。　1つ目：わんこでんきへようこそ！　2つ目：今日は○○がセール中です！　ただし、「○○」の部分には、引数itemの値を入れてください。<br>
	def print_info(item)<br>
	  puts "わんこでんきへようこそ！"<br>
	  puts "今日は#{item}がセール中です！"<br>
	end<br>
	# ③引数を「ヘッドホン」としてメソッドを呼び出してください<br>
	print_info("ヘッドホン")<br>
	# ④引数を「テレビ」としてメソッドを呼び出してください<br>
	print_info("テレビ")<br>
</div>

<div style="padding: 100px 0 100px 0;">
	メソッドを定義するときに用意した引数は、そのメソッドの中（defからendまでの間）でしか使うことができません。
	Ruby 学習コースⅡで学んだ「スコープ」という言葉を覚えているでしょうか？ スコープとは、その変数が使える範囲を指す言葉で、引数のスコープはメソッドの中だけであると表現できます。
	<br><%= image_tag '/assets/メソッド定義のスコープ1.png' %><%= image_tag '/assets/メソッド定義のスコープ2.png' %><br>
	前のスライドで引数のスコープを学びましたが、メソッドの中で定義した変数のスコープはどうなっているのでしょうか。
	メソッドの中で定義した変数も、引数と同じように、そのメソッドの中（defからendまで）でしか使うことができません。
	<br><%= image_tag '/assets/メソッドの中の変数1.png' %><%= image_tag '/assets/メソッドの中の変数2.png' %><br>
	[index.rb]<br>
	def print_info(item)<br>
	  puts "わんこでんきへようこそ！"<br>
	  puts "今日は#{item}がセール中です！"<br>
	end<br>
	print_info("ヘッドホン")<br>
	# 以下のコードを削除してください.メソッドの定義の外で使おうとしています。このままではエラーが発生してしまうことを確認してみましょう<br>
	# puts item<br>
</div>

<div style="padding: 100px 0 100px 0;">
	引数は複数受け取ることもできます。括弧の中に受け取る引数をコンマ(,)で区切って並べることで、複数の引数を指定することができます。
	引数は、左から順番に「第1引数、第2引数」というように呼びます
	<br><%= image_tag '/assets/複数の引数を受け取る.png' %><br>
	複数の引数を渡してメソッドを呼び出すには、定義するときと同じように、コンマ(,)を用います。
	渡す引数の順番と、メソッドを定義したときの引数の順番は対応しているのでメソッドを呼び出すときは、引数の順番に気をつける必要があります。
	<br><%= image_tag '/assets/引数の順番1.png' %><%= image_tag '/assets/引数の順番2.png' %><br>
	[index.rb]<br>
	# すでに、引数itemを受け取るprint_infoメソッドが定義されています。値段を意味するpriceという引数も受け取れるようにしてみましょう。<br>
	# ①引数priceも受け取るように変更してください<br>
	def print_info(item, price)<br>
	  puts "わんこでんきへようこそ！"<br>
	  puts "今日は#{item}がセール中で#{price}円です！"<br>
	end<br>
	# ②print_infoメソッドを呼び出してください<br>
	print_info("SDカード", 1200)<br>
</div>

<div style="padding: 100px 0 100px 0;">
	ここからは、メソッドの処理結果を呼び出し元で受け取る方法を学びます。
	呼び出し元で受け取る処理結果を戻り値（もどりち）と呼び、このことを「メソッドが戻り値を返す」と言います。
	下のイメージ図では、addメソッドが「3」と「7」を受け取り、処理結果の「10」を呼び出し元に返しています。この「10」にあたるのが戻り値です。
	<br><%= image_tag '/assets/戻り値とは-戻り値とは.gif' %><br>
	メソッドの中でreturnを使うと、呼び出し元で値を受け取れるようになります。
	「return 値」と書くことで、メソッドはその値を戻り値として返します。
	<br><%= image_tag '/assets/ruby3-戻り値のあるメソッド1.png' %><%= image_tag '/assets/ruby3-戻り値のあるメソッド2.png' %><br>
	戻り値がある場合、メソッドの呼び出し部分がそのまま戻り値に置き換わります。
	よって、図のようにメソッドの呼び出し部分を変数に代入するように書くことで、メソッドの戻り値を受け取ることができます。
	<br><%= image_tag '/assets/戻り値を受け取る1.png' %><%= image_tag '/assets/戻り値を受け取る2.png' %><br>
	[index.rb]<br>
	def discount(price)<br>
	# ①discountメソッドの中で、「price / 2」を戻り値として返してください<br>
		return price / 2<br>
	end<br>
	puts "テレビがセール中です！"<br>
	# ②discountメソッドを呼び出し、その戻り値を変数half_priceに代入してください<br>
	half_price = discount(15000)<br>
	# ③変数half_priceを用いて、「特別価格で〇〇円です」となるように出力してください<br>
	puts "特別価格で#{half_price}円です"<br>
</div>

<div style="padding: 100px 0 100px 0;">
	戻り値も引数と同様に、様々な値を用いることができます。
	また、if文で使うような条件式をreturnすると、その条件式の結果として得られる真偽値（trueまたはfalse）を返すことができます。
	真偽値を返すメソッドは、メソッド名の末尾に「?」をつける慣習があるので、覚えておきましょう。
	<br><%= image_tag '/assets/様々な戻り値.png' %><br>
	[index.rb]<br>
	# ①引数priceを受け取る、shipping_free?メソッドを定義してください<br>
	# ②定義したshipping_free?メソッドの中で、price >= 5000を戻り値として返してください。<br>
	def shipping_free?(price)<br>
	  return price >= 5000<br>
	end<br>
	# ③if文の条件式でshipping_free?メソッドを呼び出してください<br>
	if shipping_free?(3000)<br>
		puts "5000円以上のお買い上げなので送料はいただきません"<br>
	else<br>
		puts "追加で送料をいただきます"<br>
	end<br>
</div>

<div style="padding: 100px 0 100px 0;">
	returnについて詳しく見ていきましょう。
	returnは、戻り値を返すだけでなく、メソッドの処理を終了させる性質も持っています。
	よって、returnの後にあるメソッドの処理は実行されませんので注意しましょう。
	<br><%= image_tag '/assets/returnによる処理の終了.png' %><br>
	メソッドでは、条件分岐を組み合わせることで複数のreturnを用いることができます。
	図の例では、引数が80以下なのでifの中のreturnは実行されず、if文の後のreturnが実行されています。もし引数が80より大きければ、ifの中のreturnが実行され、そこで処理が終了します。
	<br><%= image_tag '/assets/複数のreturn1.png' %><%= image_tag '/assets/複数のreturn2.png' %><br>
	[index.rb]<br>
	def price_with_shipping(price)<br>
		# ①priceが5000以上のとき、戻り値としてpriceを返すif文を作成してください<br>
		if price >= 5000<br>
		  return price<br>
		end<br>
	  # ②priceに500を加えた値を戻り値として返してください<br>
		return price + 500<br>
	end<br>
	puts "商品の合計金額は3000円です"<br>
	puts "お支払い金額は、送料込みで#{price_with_shipping(3000)}円です"<br>
	puts "-----------"<br>
	puts "商品の合計金額は10000円です"<br>
	puts "お支払い金額は、送料込みで#{price_with_shipping(10000)}円です"<br>
</div>

<div style="padding: 100px 0 100px 0;">
	最後に、キーワード引数という特殊な書き方について見てみましょう。
	引数の数が多くなると、呼び出し側で値がどの引数に入るのかがわかりにくくなります。
	キーワード引数を用いた書き方をすることで、右の図のように呼び出し側で引数を明記することができます。
	<br><%= image_tag '/assets/キーワード引数とは1.png' %><%= image_tag '/assets/キーワード引数とは2.png' %><br>
	通常のメソッドの書き方に加えて、
	① 定義側で、引数の後にコロンを付ける
	② 呼び出し側で、値の前に引数名を書く
	とすることで、キーワード引数を持つメソッドを書くことができます。
	<br><%= image_tag '/assets/キーワード引数を持つメソッド1.png' %><%= image_tag '/assets/キーワード引数を持つメソッド2.png' %><br>
	[index.rb]<br>
	# 既にbuyメソッドが定義されています。このメソッドでキーワード引数を使うようにしてみましょう。<br>
	# ①buyメソッドがキーワード引数を使うように書き換えてください<br>
	def buy(item:, price:, count:)<br>
		puts "#{item}を#{count}台のお買い上げです"<br>
		puts "合計金額は#{price * count}円です"<br>
	end<br>
	# キーワード引数を用いて、buyメソッドを呼び出してください。ただし、引数の値は既にある値をそのまま使ってください。引数の値を消してしまった場合は、以下を利用してください。<br>item:テレビ(文字列)  price:15000(数値)  count:2(数値)<br>
	# ②キーワード引数を使うように書き換えてください<br>
	buy(item:"テレビ", price:15000, count:2)<br>
</div>

<div style="padding: 100px 0 100px 0;">

</div>

<div style="padding: 100px 0 100px 0;">
</div>

<div style="padding: 100px 0 100px 0;">
</div>

<div style="padding: 100px 0 100px 0;">
</div>

<div style="padding: 100px 0 100px 0;">
</div>

<div style="padding: 100px 0 100px 0;">
</div>

<div style="padding: 100px 0 100px 0;">
</div>




<div style="padding: 100px 0 100px 0;">
next→<%= link_to 'Ruby_part4', ruby_part4_path %><br>
Home→<%= link_to 'Home', root_path %>
</div>
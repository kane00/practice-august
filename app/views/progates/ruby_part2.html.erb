<div style="padding: 20px 0 20px 0;">
	Home→<%= link_to 'Home', root_path %>
	<%= link_to 'Progate/HTML&CSS初級編', htmlcss_first_path %>
	first→<%= link_to 'Progate/Rubyコース1', ruby_path %>
	prev→<%= link_to 'Progate/Rubyコース1', ruby_path %>
</div>

<h1>Ruby　コース2</h1>

<div style="padding: 100px 0 100px 0;">
	Rubyの基本を身につけよう
	このレッスンでは、「配列」「繰り返し処理」「ハッシュ」といった、プログラミングで必須の知識を学びます。
	決して難しいものではありませんので、楽しく学んでいきましょう！
</div>

<div style="padding: 100px 0 100px 0;">
	まずは、複数の値をまとめて扱う方法について学んで行きましょう。
	例えば、ユーザーの名前についての値がいくつもあるとき、それぞれを変数として定義するより、「ユーザーの名前一覧」といったように、関連する値をまとめて管理すると便利です。
	<br><%= image_tag '/assets/複数の値をまとめて扱おう.png' %><br>
	複数の値をまとめて管理するには、配列というものを用います。
	配列は、[値1, 値2, 値3]のように作ります。配列に入っているそれぞれの値のことを要素と呼びます。
	配列を使うと、複数の文字列や数値をまとめて書くことができます。
	<br><%= image_tag '/assets/ruby配列とは1.png' %><%= image_tag '/assets/ruby配列とは2.png' %><br>
	配列も1つの値なので、変数に代入することができます。
	配列を代入する変数名は慣習上、複数形にすることが多いので覚えておきましょう。
	左の図のように、「puts names」とすると、配列の要素が1つずつ改行されて出力されます。
	<br><%= image_tag '/assets/配列を変数に代入する1.png' %><%= image_tag '/assets/配列を変数に代入する2.png' %><br>
	[index.rb]
	# ①変数languagesに、複数の文字列を要素に持つ配列を代入してください
	languages = ["日本語", "英語", "スペイン語"]
	# ②変数languagesを出力してください
	puts languages
</div>

<div style="padding: 100px 0 100px 0;">
	配列の要素には、前から順に「0, 1, 2, ...」と数字が割り振られています。これをインデックス番号といいます。
	インデックス番号は0から始まることに注意してください。
	<br><%= image_tag '/assets/インデックス番号.png' %><br>
	配列の各要素は、配列[インデックス番号]とすることで用いることができます。
	図のように、names[1]とすると、配列namesの2つ目の要素の値を用いることができます。
	<br><%= image_tag '/assets/配列の要素を用いる1.png' %><%= image_tag '/assets/配列の要素を用いる2.png' %><br>
	変数の場合と同様に、配列の要素の値も変数展開を用いて文字列の中に含めることができます。
	<br><%= image_tag '/assets/配列の要素と変数展開1.png' %><%= image_tag '/assets/配列の要素と変数展開2.png' %><br>
	[index.rb]
	languages = ["日本語", "英語", "スペイン語"]
	# ①インデックス番号が1の要素を出力してください
	puts languages[1]
	# ②インデックス番号が0の要素を使って「◯◯を話せます」となるように出力してください
	puts "#{languages[0]}を話せます"  #{names[0]}で文字列内に配列を加えることができる
</div>

<div style="padding: 100px 0 100px 0;">
	配列の全ての要素を用いて、同じような出力をしたいとき、今までの知識を用いると左図のようになります。
	これから学ぶ「繰り返し処理」というものを使うと、これを簡単にできます。次のスライドから、繰り返し処理の書き方を学習していきましょう。
	<br><%= image_tag '/assets/ruby繰り返し処理1.png' %><%= image_tag '/assets/ruby繰り返し処理2.png' %><br>
	繰り返し処理には、each文というものを使います。
	each文を使うと、配列の要素を順番に取り出して処理を行うことができます。
	each文は、図のように、「配列.each do |変数名|」と書き、「end」までの間に実行したい処理を書きます。
	<br><%= image_tag '/assets/each文の書き方.png' %><br>
	each文は配列の要素の数だけ繰り返し処理を行います。
	図のように、「|」で囲まれた変数に配列の要素が1つずつ入っていき、その上でeach文の中の処理が実行されていきます。
	each文内の変数名（name）は好きな名前をつけられますが、配列の変数名（names）の単数形にすることが慣習上多いです。
	<br><%= image_tag '/assets/each文の仕組み1.png' %><%= image_tag '/assets/each文の仕組み2.png' %><br>
	each文では、配列の要素が1つずつ変数に代入され、each文の中の処理が実行される、というイメージが大切です。
	以下の図で、each文の流れを確認しましょう。
	<br><%= image_tag '/assets/each文の流れ.gif' %><br>
	[index.rb]
	languages = ["日本語", "英語", "スペイン語"]
	# ①配列languagesの要素を順番に取り出して処理を行うためのeach文を作成してください。ただし、それぞれの要素は変数languageに代入されるようにしてください。
	# ②each文を用いて、要素ごとに「○○を話せます」と出力してください
	# ③each文の中で、○○を話せますとなるように出力してください。ただし、○○の部分には、要素が順番に代入される変数languageの値を入れてください。
	languages.each do |language|
	  puts "#{language}を話せます"
	end
</div>

<div style="padding: 100px 0 100px 0;">
	each文で各要素が1つずつ代入される|変数|は、each文の中、つまりeach文のdoからendまでの間でしか使用することはできません。
	下の図では、変数nameはeach文の中でしか使うことができません。each文の外で変数nameを使おうとするとエラーになってしまいますので、注意してください。
	<br><%= image_tag '/assets/each文の中の変数.png' %><br>
	一方、each文の外で定義した変数は、each文の中でも使うことができます。
	下の図の例では、変数messageはeach文の外で定義されていますので、each文の中でも外でも使うことができます。
	このようなそれぞれの変数の使用できる範囲のことをスコープと呼びますので、覚えておきましょう。
	<br><%= image_tag '/assets/each文の外の変数.png' %><br>
	[index.rb]
	languages = ["日本語", "英語", "スペイン語"]
	border = "---------------------"
	languages.each do |language|
	  # ②変数borderを出力してください
	  puts border
	  puts "#{language}を話せます"
	end
	# 英語のエラー文が出力されましたか？変数languageはeach文の中だけで使うようにしましょう。
	# ①以下のコードを削除してください
	# puts language
</div>

<div style="padding: 100px 0 100px 0;">
	複数の値をまとめて管理する方法としては、配列の他にもハッシュというものがあります。
	配列は複数の値を並べて管理するのに対して、ハッシュはそれぞれの値にキーと呼ばれる名前をつけて管理します。
	次のスライドからハッシュの書き方を学んでいきましょう。
	<br><%= image_tag '/assets/ハッシュとは.png' %><br>
	ハッシュは、{キー1 => 値1, キー2 => 値2}のようにつくります。
	配列は要素を[]で囲みましたが、ハッシュは{}で囲みます。キーと値の間は「=>」でつなぎます。また、配列と同様に、要素と要素はコンマ（,）で区切ります。
	<br><%= image_tag '/assets/ハッシュのつくり方1.png' %><%= image_tag '/assets/ハッシュのつくり方2.png' %><br>
	ハッシュも1つの値なので、配列と同様に、変数に代入することができます。
	図のように、「puts user」とすると、定義したハッシュがそのまま出力されます。
	<br><%= image_tag '/assets/ハッシュを変数に代入する1.png' %><%= image_tag '/assets/ハッシュを変数に代入する2.png' %><br>
	[index.rb]
	# 以下のキーと値を持つハッシュを作って、変数examに代入してください。キー1 subject(文字列)値1 Math（文字列）キー2 score(文字列)値2   80（数値）
	# ①変数examにハッシュを代入してください
	exam = {"subject" => "Math", "score" => 80}  #[]ではなく、{}を用いてください
	# 変数examを出力してください
	puts exam
</div>

<div style="padding: 100px 0 100px 0;">
	ハッシュの各要素の値は、対応するキーを使って、ハッシュ[キー]とすることで用いることができます。
	図のように、user["name"]とすると、ハッシュuserのキー「"name"」と対応している値を用いることができます。
	<br><%= image_tag '/assets/ハッシュの要素を用いる1.png' %><%= image_tag '/assets/ハッシュの要素を用いる2.png' %><br>
	ハッシュの要素を更新してみましょう。
	ハッシュ[キー] = 値と書くことで、キーと対応している値を更新することができます。
	<br><%= image_tag '/assets/ハッシュの要素を更新する1.png' %><%= image_tag '/assets/ハッシュの要素を更新する2.png' %><br>
	次に、ハッシュに要素を追加してみましょう。
	ハッシュ[新しいキー] = 値と書くことで、ハッシュに新しい要素を追加することができます。ただし、ハッシュにすでにあるキーを指定すると、要素の追加ではなく更新になってしまうので注意しましょう。
	<br><%= image_tag '/assets/ハッシュの要素を更新する1.png' %><%= image_tag '/assets/ハッシュの要素を更新する2.png' %><br>
	[index.rb]
	exam = {"subject" => "Math", "score" => 80}
	# ①キー「"subject"」の値を出力してください
	puts exam["subject"]
	# ②キー「"subject"」の値を「"Science"」に更新してください
	exam["subject"] = "Science"
	# ③もう一度、キー「"subject"」の値を出力してください
	puts exam["subject"]
	# ④キーが「"grade"」、値が「"good"」の要素を追加してください
	exam["grade"] = "good"
	# ⑤キー「"grade"」の値を出力してください
	puts exam["grade"]
</div>

<div style="padding: 100px 0 100px 0;">
	ハッシュは以下の図のように、キーの部分を文字列ではなく、先頭にコロン「:」を付けた書き方をすることもできます。
	この「:name」という書き方のことをシンボルと言います。
	<br><%= image_tag '/assets/ハッシュの書き方.png' %><br>
	シンボルとは、文字を「"」や「'」で囲む代わりに、先頭に「:」をつけた書き方のことをいいます。
	文字列とシンボルは厳密には異なりますが、基本的には同じように使用することができます。
	<br><%= image_tag '/assets/シンボルとは1.png' %><%= image_tag '/assets/シンボルとは2.png' %><br>
	シンボルは、ハッシュのキーとしてよく使われます。
	右の図のように、ハッシュのキーの部分を「:name」という様に、シンボルを用いた場合には、その値を用いる時も「user[:name]」とシンボルで指定する必要があります。この際、キーに文字列を指定してもうまくいかないので注意しましょう。
	<br><%= image_tag '/assets/ハッシュのキーにシンボルを用いる1.png' %><%= image_tag '/assets/ハッシュのキーにシンボルを用いる2.png' %><br>
	# ①キーをシンボルで書き換えてください
	# exam = {"subject" => "Math", "score" => 80}
	exam = {:subject => "Math", :score => 80}
	# ②キー「:score」の値を出力してください
	puts exam[:score]
</div>


<div style="padding: 100px 0 100px 0;">
	ハッシュのキーにシンボルを用いるときには、省略した書き方をすることができます。具体的には「:key =>」を「key:」というように省略することができます。
	<br><%= image_tag '/assets/キーがシンボルのハッシュの省略（1）.png' %><br>
	省略した書き方の場合でも、あくまでキーはシンボルですので、要素を取得する場合には以下のようにシンボルを用いる必要があります。
	<br><%= image_tag '/assets/キーがシンボルのハッシュの省略（2）1.png' %><%= image_tag '/assets/キーがシンボルのハッシュの省略（2）2.png' %><br>
	一度、ハッシュの書き方のおさらいをしましょう。
	ここまでに見てきたように、ハッシュには以下の3通りの書き方があります。
	最後の「キーがシンボルの書き方（省略形）」が一般的ですので、しっかりと覚えておきましょう。
	<br><%= image_tag '/assets/ハッシュの書き方のまとめ.png' %><br>
	[index.rb]
	# ①省略した書き方で書き換えてください
	#exam = {:subject => "Math", :score => 80}
	exam = {subject: "Math", score: 80}
	puts "#{exam[:subject]}: #{exam[:score]}点"
</div>

<div style="padding: 100px 0 100px 0;">
	ここまで、ハッシュ[キー]とすることでハッシュの値を取得してきました。
	では、ハッシュに存在しないキーを指定すると、値はどうなるでしょうか。
	左の図で、存在しない「:weight」というキーの値を表示しようとした場合、右の図のようになにも表示されません。これは「user[:weight]」の値が「何もない」ためです。
	<br><%= image_tag '/assets/存在しないキーを指定する1.png' %><%= image_tag '/assets/存在しないキーを指定する2.png' %><br>
	ハッシュから存在しないキーの値を取り出した時の「何もない」という値は、Rubyでは「nil」(読み方：ニル)という特別な値で表現されます。
	「nil」は「何もない」という意味なので、putsしても何も表示されません。
	次のレッスンでさらにnilについて学びますが、まずは実際に、何も表示されないことを確かめてみましょう。
	<br><%= image_tag '/assets/nilとは1.png' %><%= image_tag '/assets/nilとは2.png' %><br>
	[index.rb]
	exam = {subject: "Math", score: 80}
	# ①キー「:grade」の値を出力してください
	puts exam[:grade]
	# ②nilを出力してください
	puts nil
</div>

<div style="padding: 100px 0 100px 0;">
	今回は、特定の値がある場合とない場合で処理を分岐する方法を学びましょう。
	この方法を学ぶと、図のように、キーageの値がある場合とない場合で出力を変えることができます。
	処理を分岐するためにはif文を使いますが、次のスライドからどのように使えばよいか確認していきましょう。
	<br><%= image_tag '/assets/nilを回避する1.png' %><%= image_tag '/assets/nilを回避する2.png' %><br>
	これまでは、ifの条件がtrueであれば実行し、falseであれば実行しない、というように学んでいました。
	実は、ifの条件には、真偽値(trueとfalse)以外も使うことができます。Rubyでは、ifの条件に真偽値以外を用いたとき、それがnilであればfalseとして扱われ、それ以外はtrueとして扱われます。
	<br><%= image_tag '/assets/ifとnil.png' %><br>
	具体的な使い方を見ていきましょう。「if ハッシュ[キー]」とすることで、値がない場合、すなわちnilの場合はfalseとして扱われます。
	左の図では、ifの条件に数値「21」が入ります。これはnilでもfalseでもないので、if側の処理が実行されます。一方、右の図では、ifの条件に「nil」が入るので、else側の処理が実行されます。
	<br><%= image_tag '/assets/nilを利用したif文1.png' %><%= image_tag '/assets/nilを利用したif文2.png' %><br>
	[index.rb]
	exam = {subject: "Math"}
	# 今回は、ハッシュexamにキー「:score」の要素がありません。このままだと、不自然な文が出力されてしまうので、条件分岐を使って解決しましょう。
	# ①条件式にキー「:score」の値を使うif文をつくってください
	# ②キー「:score」の値があるときは、「○○の結果は△△点です」と出力するようにしてください。（すでにコードにあるものを用いてください）
	if exam[:score]
	  puts "#{exam[:subject]}の結果は#{exam[:score]}点です"
	# ③キー「:score」の値がないときは、○○の結果は分かりませんと出力するようにしてください。ただし、○○の部分には、要素のキー:subjectの値を入れてください。
	 else
	  puts "#{exam[:subject]}の結果は分かりません"
	end
</div>

<div style="padding: 100px 0 100px 0;">
	ここからは、要素がハッシュになっている配列を見ていきましょう。
	配列の要素には、文字列や数値だけでなく、ハッシュも使うことができるので、左の図のような配列を作ることができます。
	その際、コードが横に長くなることを防ぐために、右の図のように要素ごとに改行することがよくありますので、覚えておきましょう。
	<br><%= image_tag '/assets/配列の要素にハッシュを入れる1.png' %><%= image_tag '/assets/配列の要素にハッシュを入れる2.png' %><br>
	
</div>

<div style="padding: 100px 0 100px 0;">
</div>

<div style="padding: 100px 0 100px 0;">
</div>

<div style="padding: 100px 0 100px 0;">
</div>

<div style="padding: 100px 0 100px 0;">
</div>

<div style="padding: 100px 0 100px 0;">
</div>

<div style="padding: 100px 0 100px 0;">
</div>

<div style="padding: 100px 0 100px 0;">
</div>


<div style="padding: 100px 0 100px 0;">
next→<%= link_to 'Ruby_part3', ruby_part3_path %><br>
Home→<%= link_to 'Home', root_path %>
</div>
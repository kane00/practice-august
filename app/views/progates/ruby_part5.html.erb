<div style="padding: 20px 0 20px 0;">
	Home→<%= link_to 'Home', root_path %>
	<%= link_to 'Progate/HTML&CSS初級編', htmlcss_first_path %>
	first→<%= link_to 'Progate/Rubyコース1', ruby_path %>
	prev→<%= link_to 'Progate/Rubyコース4', ruby_part4_path %>
</div>

<h1>Ruby　コース5</h1>

<div style="padding: 100px 0 100px 0;">
	継承を学ぼう
	Ruby学習コースもこれが最後のレッスンです！
	にんじゃわんこ達と一緒に、クラスの応用的な使い方について学んでいきましょう。
</div>

<div style="padding: 100px 0 100px 0;">
	今回は「Ruby 学習コース IV」でつくった「料理注文システム」を改良してみよう。<br>
	具体的にはどのようにするんですか？<br>
	今回は、食べ物と飲み物で表示する内容を変えられるようにするぞ。<br>
	はい、わかりました！<br>
	まずは今回作成する目標物を確認してみよう。<br>
	まずはこのレッスンで作る目標物を確認します。
	以下の図のように、食べ物の場合には「カロリー」が、飲み物の場合には「容量」が表示されていることを確かめてみましょう。
	また、今日が日曜日の場合には100円引きになるようになっています。
	<br><%= image_tag '/assets/目標物の特徴.png' %><br>
	先ほど確認したように、食べ物の場合はカロリーを、飲み物の場合は容量を表示できるようにしていこう。
	では、前回作ったMenuクラスにカロリーと容量を扱うインスタンス変数を追加すればいいんですね！
	いや、そうするのではなく、食べ物用のFoodクラスと、飲み物用のDrinkクラスを新たに作っていくのじゃ。
	<br><%= image_tag '/assets/食べ物と飲み物をカスタマイズしよう.png' %><br>
	それでは新たにFoodクラスとDrinkクラスをつくっていきましょう。
	1から新たにつくることもできますが、すでにあるMenuクラスを利用して、それをもとにFoodクラスとDrinkクラスをつくることができます。
	そうすることで、共通部分をまとめることができ、効率的にコードを書くことができます。
	<br><%= image_tag '/assets/既存のクラスを活用する1.png' %><%= image_tag '/assets/既存のクラスを活用する2.png' %><br>
	あるクラスを元にして新たなクラスをつくることを「継承」と呼びます。
	「class 新しいクラス名 < 元となるクラス名」とすることで他のクラスを継承して、新しいクラスを定義することができます。
	このとき、新しいクラスは「子クラス」、元となるクラスは「親クラス」と呼ばれます。
	<br><%= image_tag '/assets/継承とは1.png' %><%= image_tag '/assets/継承とは2.png' %><br>
	[Menu.rb]
	class Menu
	  attr_accessor :name
	  attr_accessor :price
	  def initialize(name:, price:)
	    self.name = name
	    self.price = price
	  end
	  def info
	    return "#{self.name} #{self.price}円"
	  end
	  def get_total_price(count)
	    total_price = self.price * count
	    if count >= 3
	      total_price -= 100
	    end
	    return total_price
	  end
	end
	[Food.rb]
	# ①Menuクラスを継承したFoodクラスを、food.rbに定義しましょう。
	# ②requireを使ってmenu.rbを読み込んでください
	require "./menu"
	# ③Menuクラスを継承したFoodクラスをつくってください
	class Food < Menu
	end
	[Drink.rb]
	# ④Drinkクラスも同様にして、drink.rbに定義しましょう。
	# ⑤requireを使ってmenu.rbを読み込んでください
	require "./menu"
	# ⑥Menuクラスを継承したDrinkクラスをつくってください
	class Drink < Menu
	end
</div>

<div style="padding: 100px 0 100px 0;">
	これでMenuクラスをもとに、FoodクラスとDrinkクラスがつくれたんですね！<br>
	そうじゃ。継承をすると子クラスには、親クラスのインスタンス変数とインスタンスメソッドが引き継がれるぞ。<br>
	なるほど、ではFoodクラスのインスタンスも、Menuクラスのインスタンスと同じように使えるか確かめてみますね！<br>
	<br><%= image_tag '/assets/継承されるもの.png' %><br>
	継承をすると、子クラスは親クラスのインスタンス変数とインスタンスメソッドを引き継ぎます。
	図のようにFoodクラスのインスタンスは、Menuクラスのインスタンス変数やインスタンスメソッドを呼び出すことが出来ます。
	<br><%= image_tag '/assets/子クラスのインスタンス1.png' %><%= image_tag '/assets/子クラスのインスタンス2.png' %><br>
	[index.rb]
	# ①requireを使ってfood.rbとdrink.rbを読み込んでください
	require "./food"
	require "./drink"
	# ②Foodクラスのインスタンスを生成して変数food1に代入してください。ただし、インスタンスを生成するときの引数は以下のようにしてください。・name: ピザ(文字列)　　・price: 800(数値)
	food1 = Food.new(name: "ピザ", price: 800)  #Food.newには、キーワード引数を用いてください
	# ③food1に対してinfoメソッドを呼び出して戻り値を出力してください
	puts food1.info
	# ④Drinkクラスのインスタンスを生成して変数drink1に代入してください。ただし、インスタンスを生成するときの引数は以下のようにしてください。・name: コーラ(文字列)　　・price: 300(数値)
	drink1 = Drink.new(name: "コーラ", price: 300)
	# drink1に対してinfoメソッドを呼び出して戻り値を出力してください
	puts drink1.info
	[menu.rb][food.rb][drink.rb]
	前回から変更なし、省略
</div>

<div style="padding: 100px 0 100px 0;">
	継承についてはわかったかな？<br>
	はい、インスタンス変数やインスタンスメソッドを引き継ぐんですね！<br>
	うむ、その通りじゃ。FoodクラスとDrinkクラスが用意できたから、ここからFoodクラスにはカロリーの、Drinkクラスには容量のインスタンス変数を追加してみよう。<br>
	<br><%= image_tag '/assets/独自のインスタンス変数を追加しよう.png' %><br>
	子クラスにインスタンス変数を追加するためには、これまで通り「attr_accessor」を用います。
	以下のFoodクラスの例では、親クラスで定義してあるnameとpriceに加え、新たに追加したcalorieというインスタンス変数を用いることができます。
	<br><%= image_tag '/assets/子クラスにインスタンス変数を追加する1.png' %><%= image_tag '/assets/子クラスにインスタンス変数を追加する2.png' %><br>
	[index.rb]
	require "./food"
	require "./drink"
	food1 = Food.new(name: "ピザ", price: 800)
	drink1 = Drink.new(name: "コーラ", price: 300)
	# ③food1.calorieに「700」を代入してください
	food1.calorie = 700
	# ④food1.calorieを出力してください
	puts food1.calorie
	# ⑤drink1.amountに「500」を代入してください
	drink1.amount = 500
	# ⑥drink1.amountを出力してください
	puts drink1.amount
	[food.rb]
	require "./menu"
	class Food < Menu
	  # ①calorieというインスタンス変数を追加してください  attr_accessor は、型に縛られず値を入れることができます。(テーブルのカラム=オブジェクトの属性)をクラスの中で定義しているイメージ
	  attr_accessor :calorie
	end
	[drink.rb]
	require "./menu"
	class Drink < Menu
	  # ②amountというインスタンス変数を追加してください
	  attr_accessor :amount
	end
	[menu.rb]
	変更なし、省略
</div>

<div style="padding: 100px 0 100px 0;">
	子クラスに独自のインスタンス変数が追加できたように、インスタンスメソッドも追加することができるぞ。<br>
	なるほど、やってみます！<br>
	<br><%= image_tag '/assets/インスタンスメソッドを追加しよう.png' %><br>
	[index.rb]
	require "./food"
	require "./drink"
	food1 = Food.new(name: "ピザ", price: 800)
	food1.calorie = 700
	# ③food1に対してcalorie_infoメソッドを呼び出して戻り値を出力してください
	puts food1.calorie_info
	[food.rb]
	require "./menu"
	class Food < Menu
	  attr_accessor :calorie
	  # Foodクラスにインスタンスメソッドを追加してみましょう。
	  # ①calorie_infoメソッドを定義してください。calorie_infoメソッドの中で、○○は△△kcalですというような文字列を戻り値として返してください。ただし、○○の部分にはインスタンス変数nameの値を、△△の部分にはインスタンス変数calorieの値を入れてください。
	  def calorie_info
	    return "#{self.name}は#{self.calorie}kcalです"
	  end
	end
	[menu.rb][drink.rb]
	変更なし、省略
</div>

<div style="padding: 100px 0 100px 0;">
	継承について、だいぶわかってきました！<br>
	では、いよいよ料理注文システムの改良にとりかかるぞ。「Ruby学習コースⅣ」ではMenuクラスを用いて作ってきたが、それをFoodクラスとDrinkクラスに置き換えてみよう。<br>
	はい、わかりました！<br>
	[index.rb]
	# RubyⅣでつくったプログラムが用意されています。まずは、MenuクラスのかわりにFoodクラスとDrinkクラスを使うようにしてみましょう
	# ①require "./menu"を削除して、food.rbとdrink.rbを読み込むように書き換えてください
	require "./food"
	require "./drink"
	# ②food1とfood2をFoodクラスのインスタンスに書き換えてください
	food1 = Food.new(name: "ピザ", price: 800)
	food2 = Food.new(name: "すし", price: 1000)
	# ③drink1とdrink2をDrinkクラスのインスタンスに書き換えてください
	drink1 = Drink.new(name: "コーラ", price: 300)
	drink2 = Drink.new(name: "お茶", price: 200)
	menus = [food1, food2, drink1, drink2]
	index = 0
	menus.each do |menu|
	  puts "#{index}. #{menu.info}"
	  index += 1
	end
	puts "--------------"
	puts "メニューの番号を選択してください"
	order = gets.chomp.to_i
	selected_menu = menus[order]
	puts "選択されたメニュー: #{selected_menu.name}"
	puts "個数を入力してください(3つ以上で100円割引)"
	count = gets.chomp.to_i
	puts "お会計は#{selected_menu.get_total_price(count)}円です"
	# FoodクラスとDrinkクラスはどちらもMenuクラスを継承しているので、クラスの部分を書き換えても正常にプログラムは動作するはずです。実行して確かめてみましょう。
	[menu.rb][food.rb][drink.rb]
	変更なし、省略
</div>

<div style="padding: 100px 0 100px 0;">
	次はメニューの一覧でカロリーの情報を表示したいですね！<br>
	では、インスタンスの情報を表示するinfoメソッドを改良してみよう。<br>
	でも、infoメソッドってMenuクラスで定義されてるから、calorieって使えないですよね…？<br>
	うむ、そんなときはinfoメソッドをFoodクラス内で上書きすればいいのじゃ。<br>
	親クラスにあるメソッドと同じ名前のメソッドを子クラスで定義すると、メソッドを上書きすることができます。これをメソッドの「オーバーライド」と呼びます。
	オーバーライドをすると、子クラスのインスタンスは親クラスのメソッドではなく、子クラスで定義したメソッドを呼び出すようになります。
	<br><%= image_tag '/assets/ruby5オーバーライド1.png' %><%= image_tag '/assets/ruby5オーバーライド2.png' %><%= image_tag '/assets/ruby5オーバーライド3.png' %><br>
	オーバーライドについてもう少し見てみましょう。
	図のように、子クラスのインスタンスは、子クラスで定義したメソッドを優先して呼び出すようになっています。したがって、子クラスと親クラスに同名のメソッドがある場合は子クラスのメソッドを呼び出すので、結果的にメソッドの内容が上書きされたようになります。
	<br><%= image_tag '/assets/ruby5オーバーライドの仕組み.png' %><br>
	[food.rb]
	require "./menu"
	class Food < Menu
	  attr_accessor :calorie
	  # ①infoメソッドをオーバーライドして、追加した情報を出力するようにしましょう。
	  # ②infoメソッドを定義してください。infoメソッドの中で、○○ △△円 (□□kcal)というような文字列を戻り値として返してください。ただし、記号の部分は、以下に示すインスタンス変数の値を入れてください。　・○○: name　・△△: price　・□□: calorie
	  def info
	    return "#{self.name} #{self.price}円 (#{self.calorie}kcal)"
	  end
	  def calorie_info
	    return "#{self.name}は#{self.calorie}kcalです"
	  end
	end
	[drink.rb]
	require "./menu"
	class Drink < Menu
	  attr_accessor :amount
	  # ③同じように、Drinkクラスでもinfoメソッドをオーバーライドしましょう。
	  # ④infoメソッドを定義してください。infoメソッドの中で、○○ △△円 (□□mL)というような文字列を戻り値として返してください。ただし、記号の部分は、以下に示すインスタンス変数の値を入れてください。　・○○: name　・△△: price　・□□: amount
	  def info
	    return "#{self.name} #{self.price}円 (#{self.amount}mL)"
	  end
	end
	[index.rb][menu.rb]
	変更なし、省略
</div>

<div style="padding: 100px 0 100px 0;">
	先程学んだオーバーライドをinitializeメソッドにも用いてみよう。<br>
	なるほど、initializeメソッドも子クラスでオーバーライドできるんですね！<br>
	そうすることで、Foodクラスではcalorieのインスタンス変数の値を、Food.newのときに代入できるようになるぞ。<br>
	[index.rb]
	require "./food"
	require "./drink"
	#  ③initializeメソッドをオーバーライドしたので、Food.newの引数を追加しましょう。
	#  ③Food.newの引数を書き換えてください。またfood1のインスタンス変数 calorieに値を代入している部分を削除してください。
	food1 = Food.new(name: "ピザ", price: 800, calorie: 700)
	food2 = Food.new(name: "すし", price: 1000, calorie: 600)
	drink1 = Drink.new(name: "コーラ", price: 300)
	drink1.amount = 500
	drink2 = Drink.new(name: "お茶", price: 200)
	drink2.amount = 400
	menus = [food1, food2, drink1, drink2]
	index = 0
	menus.each do |menu|
	  puts "#{index}. #{menu.info}"
	  index += 1
	end
	puts "--------------"
	puts "メニューの番号を選択してください"
	order = gets.chomp.to_i
	selected_menu = menus[order]
	puts "選択されたメニュー: #{selected_menu.name}"
	puts "個数を入力してください(3つ以上で100円割引)"
	count = gets.chomp.to_i
	puts "お会計は#{selected_menu.get_total_price(count)}円です"
	[food.rb]
	require "./menu"
	class Food < Menu
	  attr_accessor :calorie
	  #  ①Foodクラスの中で、initializeメソッドを定義してください。ただし、引数は以下のキーワード引数を受け取るようにしてください。・name  ・price  ・calorie
	  #  ②initializeメソッドで、インスタンス変数name、price、calorieに、引数 name、price、calorieの値をそれぞれ代入してください。
	  def initialize(name:, price:, calorie:)  #(引数)を加える
	    self.name = name
	    self.price = price
	    self.calorie = calorie
	  end
	  def info
	    return "#{self.name} #{self.price}円 (#{self.calorie}kcal)"
	  end
	  def calorie_info
	    return "#{self.name}は#{self.calorie}kcalです"
	  end
	end
	[menu.rb][drink.rb]
	変更なし、省略
</div>

<div style="padding: 100px 0 100px 0;">
	Foodクラスでinitializeメソッドをオーバライドしたが、nameとpriceについては共通の処理で、Menuクラスのinitializeメソッドにも含まれているな。	このメソッド内の重複をまとめる方法を見ていこう。<br>
	はい、わかりました！<br>
	<br><%= image_tag '/assets/メソッド内の重複.png' %><br>
	オーバーライドしたメソッドの中で「super」とすることで、親クラスの同名のメソッドを呼び出すことができます。
	あくまでメソッドを呼び出しているので、親クラスのメソッドの定義に合わせて、superに対して引数を渡す必要があります。
	<br><%= image_tag '/assets/ruby5-super1.png' %><%= image_tag '/assets/ruby5-super2.png' %><br>
	[food.rb]
	require "./menu"
	class Food < Menu
	  attr_accessor :calorie
	  def initialize(name:, price:, calorie:)
	    # ①superを使って書き換えてください。initializeメソッドの中でsuperを呼び出してください。ただし、引数は以下のキーワード引数を渡してください。・name: 引数nameの値・price: 引数priceの値
	    super(name: name, price: price)
	    # ②initializeメソッドの中でインスタンス変数nameとpriceに値を代入している部分を削除してください。
	    #self.name = name
	    #self.price = price
	    self.calorie = calorie
	  end
	  def info
	    return "#{self.name} #{self.price}円 (#{self.calorie}kcal)"
	  end
	  def calorie_info
	    return "#{self.name}は#{self.calorie}kcalです"
	  end
	end
	[index.rb][menu.rb][drink.rb]
	変更なし、省略
</div>

<div style="padding: 100px 0 100px 0;">
	superを用いてFoodクラスでinitializeメソッドを定義できました！<br>
	よし、ではDrinkクラスでも同様に、initializeメソッドをオーバーライドしてみよう。<br>
	[index.rb]
	require "./food"
	require "./drink"
	food1 = Food.new(name: "ピザ", price: 800, calorie: 700)
	food2 = Food.new(name: "すし", price: 1000, calorie: 600)
	#　③Drink.newの引数を書き換えてください
	#  ④drink1に代入しているDrink.newの引数に、以下のキーワード引数を追加してください。amount: 500
	#  ⑤drink1のインスタンス変数 amountに値を代入している部分を削除してください。
	drink1 = Drink.new(name: "コーラ", price: 300, amount: 500)
	#  ⑥・drink2に代入しているDrink.newの引数に、以下のキーワード引数を追加してください。amount: 400
	#  ⑦・drink2のインスタンス変数 amountに値を代入している部分を削除してください。
	drink2 = Drink.new(name: "お茶", price: 200, amount: 400)
	menus = [food1, food2, drink1, drink2]
	index = 0
	menus.each do |menu|
	  puts "#{index}. #{menu.info}"
	  index += 1
	end
	puts "--------------"
	puts "メニューの番号を選択してください"
	order = gets.chomp.to_i
	selected_menu = menus[order]
	puts "選択されたメニュー: #{selected_menu.name}"
	puts "個数を入力してください(3つ以上で100円割引)"
	count = gets.chomp.to_i
	puts "お会計は#{selected_menu.get_total_price(count)}円です"
	[drink.rb]
	require "./menu"
	class Drink < Menu
	  attr_accessor :amount
	  # ①Drinkクラスの中で、initializeメソッドを定義してください。ただし、引数は以下のキーワード引数を受け取るようにしてください。・name  ・price  ・amount
	  def initialize(name:, price:, amount:)
	    #　②initializeメソッドの中で、インスタンス変数amountに、引数amountの値を代入してください。
	    super(name: name, price: price)
	    self.amount = amount
	  end
	  def info
	    return "#{self.name} #{self.price}円 (#{self.amount}mL)"
	  end
	end
	[menu.rb][food.rb]
	変更なし、省略
</div>

<div style="padding: 100px 0 100px 0;">
	ここから、もう１つ機能を追加してみよう。<br>
	具体的には、今日が日曜日である場合には100円引きにする機能を作ってみるぞ。<br>
	「今日が日曜日かどうか」って、どうしたらわかるのですか？<br>
	まずはその方法を順に学んでいこう。<br>
	日付を扱うためには、Dateクラスというものを用います。
	DateクラスとはRubyがすでに用意しているクラスで、図のようにrequireを用いて読み込むことで、自分でクラスを定義しなくても使うことができます。		このようにすでに用意されているクラスは、requireの書き方が少し異なるので注意しましょう。
	<br><%= image_tag '/assets/Dateクラスの読み込み.png' %><br>
	Dateクラスは今まで扱ってきたクラスと同様に、Date.newとすることでインスタンスを生成することができます。
	Dateクラスのインスタンスをputsすると、右の図のようにその日付を表示することができます。
	<br><%= image_tag '/assets/Dateクラスのインスタンス1.png' %><%= image_tag '/assets/Dateクラスのインスタンス2.png' %><br>
	Dateクラスには多くのインスタンスメソッドが用意されています。
	今回は、Dateクラスのインスタンスの日付が、「日曜日かどうか」を真偽値で返すsunday?メソッドを使ってみましょう。
	<br><%= image_tag '/assets/Dateクラスのインスタンスメソッド1.png' %><%= image_tag '/assets/Dateクラスのインスタンスメソッド2.png' %><br>
	[]
	# 料理注文システムに機能を追加するために必要な、Dateクラスを使ってみましょう。まずは、Dateクラスを読み込みましょう。
	# ①requireを用いて、Dateクラスを読み込んでください
	  require "date"
	# ②変数birthdayに、Dateクラスのインスタンスを代入してください。Date.newの引数には、(年, 月, 日)を順番にいれる必要があります。今回は、あなたの誕生日をいれてみましょう！
	birthday = Date.new(2000, 1, 1)
	# ③変数birthdayをputsしてください
	puts birthday
	# ④変数birthdayにsunday?メソッドを用いた結果をputsしてください
	puts birthday.sunday?
</div>

<div style="padding: 100px 0 100px 0;">
	Dateクラスは簡単に使うことができて便利ですね！<br>
	そうじゃな、もう少しDateクラスについて見てみよう。<br>
	DateクラスのインスタンスをつくるためにDate.newを使いましたが、Dateクラスでは、Date.todayとすることで、今日の日付のインスタンスをつくることができるようになっています。
	<br><%= image_tag '/assets/今日の日付のDateインスタンスを取得する1.png' %><%= image_tag '/assets/今日の日付のDateインスタンスを取得する2.png' %><br>
	[]
	require "date"
	# ①変数todayに、Date.todayの戻り値を代入してください
	today = Date.today
	# ②変数todayをputsしてください
	puts today
	# ③変数todayに対してsunday?メソッドを用いた結果をputsしてください
	puts today.sunday?
</div>

<div style="padding: 100px 0 100px 0;">
	先程、Date.todayのように、クラス名に対してメソッドを呼び出したな。<br>
	このように、クラスに対して呼び出すメソッドのことをクラスメソッドというぞ。<br>
	なるほど！<br>
	これからクラスメソッドの使い方について学んでいこう。<br>
	<br><%= image_tag '/assets/クラスメソッドとは.png' %><br>
	クラスメソッドは、「def クラス名.メソッド名」とすることで定義できます。インスタンスメソッドとの違いはメソッド名の前にクラス名を書く必要がある点です。
	今回はMenuクラスに、「is_discount_day?」というクラスメソッドを定義してみましょう。
	<br><%= image_tag '/assets/クラスメソッドの定義1.png' %><%= image_tag '/assets/クラスメソッドの定義2.png' %><br>
	[Menu.rb]
	class Menu
	  attr_accessor :name
	  attr_accessor :price
	  def initialize(name:, price:)
	    self.name = name
	    self.price = price
	  end
	  def info
	    return "#{self.name} #{self.price}円"
	  end
	  def get_total_price(count)
	    total_price = self.price * count
	    if count >= 3
	      total_price -= 100
	    end
	    return total_price
	  end
	  # ここからは、目標物の機能をつくりながら、クラスメソッドについて学んでいきましょう
	  # ①クラスメソッド「is_discount_day?」を定義してください
	  def Menu.is_discount_day?
	  end
	end
</div>

<div style="padding: 100px 0 100px 0;">
	Menuクラスに「is_discount_day?」というクラスメソッドを定義しました！<br>
	これはどのような処理をするのですか？<br>
	今日の日付が日曜日の場合にはtrueを返し、そうでない場合にはfalseを返す、という処理にしてみよう。<br>
	<br><%= image_tag '/assets/クラスメソッドの処理を作ろう.png' %><br>
	クラスメソッドの中の処理を作っていきます。今回はDateクラスを用いて、今日の日付を取得しましょう。
	以下の図のように、クラスメソッドの中でもDateクラスを用いることが可能です。
	<br><%= image_tag '/assets/クラスメソッドの中でDateクラスを用いる.png' %><br>
	[menu.rb]
	# ①requireを用いて、Dateクラスを読み込んでください
	require "date"
	class Menu
	  attr_accessor :name
	  attr_accessor :price
	  def initialize(name:, price:)
	    self.name = name
	    self.price = price
	  end
	  def info
	    return "#{self.name} #{self.price}円"
	  end
	  def get_total_price(count)
	    total_price = self.price * count
	    if count >= 3
	      total_price -= 100
	    end
	    return total_price
	  end
	  def Menu.is_discount_day?
	    # Menuクラスのクラスメソッドis_discount_day?で、今日が日曜日かどうかの真偽値を返すようにしましょう。
	    # ②is_discount_day?メソッドの中で、変数todayを定義し、今日の日付のDateクラスのインスタンスを代入してください。
	    today = Date.today
	    # ③日曜日であればtrue、そうでなければfalseを返してください
	    return today.sunday?
	  end
	end
</div>

<div style="padding: 100px 0 100px 0;">
	これで「is_discount_day?」メソッドが完成しましたね！<br>
	そうじゃな。よくやったぞ。では最後に、作成したクラスメソッドを実際に用いてみよう。<br>
	クラスメソッドは定義時と同じように、「クラス名.メソッド名」とすることで呼び出すことができます。
	<br><%= image_tag '/assets/クラスメソッドを呼び出す1.png' %><%= image_tag '/assets/クラスメソッドを呼び出す2.png' %><br>
	クラスメソッドはクラスの中でも、同じように呼び出すことができます。
	今回は、Menuクラスのインスタンスメソッドである「get_total_price」メソッドの中で、クラスメソッド「is_discount_day?」を呼び出してみましょう！
	<br><%= image_tag '/assets/インスタンスメソッドの中でクラスメソッドを呼び出す.png' %><br>
	インスタンスに対して呼び出すメソッドは「インスタンスメソッド」、クラスに対して呼び出すメソッドは「クラスメソッド」という違いを、ここで復習しておきましょう。
	<br><%= image_tag '/assets/インスタンスメソッドとクラスメソッド1.png' %><%= image_tag '/assets/インスタンスメソッドとクラスメソッド2.png' %><br>
	[menu.rb]
	require "date"
	class Menu
	  attr_accessor :name
	  attr_accessor :price
	  def initialize(name:, price:)
	    self.name = name
	    self.price = price
	  end
	  def info
	    return "#{self.name} #{self.price}円"
	  end
	  def get_total_price(count)
	    total_price = self.price * count
	    if count >= 3
	      total_price -= 100
	    end
	    # ①get_total_priceメソッドの中で、以下の条件のif文を作成してください。　
	    # ・引数countが1以上かつ　　・Menu.is_discount_day?の結果がtrueである
	    if count >= 1 && Menu.is_discount_day?
	      # ②上記のif文が成り立つ場合、変数total_priceから100だけ引いて値を更新してください。
	      #return total_price = total_price - 100
	      total_price -= 100
	    end
	    return total_price
	  end
	  def Menu.is_discount_day?
	    today = Date.today
	    return today.sunday?
	  end
	end
	[index.rb][food.rb][drink.rb]
	変更なし、省略
</div>


<div style="padding: 100px 0 100px 0;">
next→<br>
Home→<%= link_to 'Home', root_path %>
</div>
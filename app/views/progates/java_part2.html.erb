<div style="padding: 20px 0 20px 0;">
	<%= link_to 'Home', root_path %>
	<%= link_to 'Progate/HTML&CSS初級編', htmlcss_first_path %>
	<%= link_to 'Progate/Javaコース1', java_path %>
	<%= link_to 'Progate/Javaコース2', java_part2_path %>
</div>

<h1>Java　コース2</h1>


<div style="padding: 100px 0 100px 0;">
	早速、真偽値という新しい値を学びます。真偽値には「true」と「false」という2つの値しか存在しません。trueは真（正しい）、falseは偽（間違っている）を意味します。真偽値のデータ型はboolean型です。true, falseにはダブルクォーテーションは付けないことに注意しましょう
	<%= image_tag '真偽値とは1.png' %><%= image_tag '真偽値とは2.png' %><br>
	比較演算子とは、値を比較するための記号で、比較した結果は真偽値（trueかfalse）になります。
	「x == y」はxとyが同じかどうかを比較し、同じであればtrue、違っていればfalseとなります。また「x != y」はその逆になります。
	代入の「=」と比較の「==」を混同しないように注意してください。
	<%= image_tag '比較演算1.png' %><%= image_tag '比較演算2.png' %><br>
	真偽値も出力することができます。ただし、trueやfalseはダブルクォーテーションで囲んではいけません。注意しましょう。
	比較演算子の結果は真偽値になり、コンソールにも真偽値が出力されます。
	<%= image_tag '真偽値出力1.png' %><%= image_tag '真偽値出力2.png' %><br><br>
	class Main {<br>
	  public static void main(String[] args) {<br>
	    // 「true」を用いて、「真」を表す真偽値を出力してください<br>
	    System.out.println(true);<br>
	    // 「false」を用いて、「偽」を表す真偽値を出力してください<br>
	    System.out.println(false);<br>
	    // 「==」を用いて、値を比較した結果を出力してください<br>
	    System.out.println(12/4 == 3);<br>
	    // 「!=」を用いて、値を比較した結果を出力してください<br>
	    System.out.println(12/4 != 3);<br>
	    // boolean型の変数boolを定義し、「3 * 9 == 27」を代入してください<br>
	    boolean bool = 3 * 9 == 27;<br>
	    // 変数boolの値を出力してください<br>
	    System.out.println(bool);<br>
	  }<br>
	}
</div>

<div style="padding: 100px 0 100px 0;">
	<, >という記号は数学でも用いる大小比較の記号です。x < yはxがyより小さければtrue, 大きければfalseを返します。x > yはその逆になります。また数学で同様に用いる≦, ≧という記号（以上や以下を表します）は、<=, >=と記述します。
	<%= image_tag '大小比較1.png' %><%= image_tag '大小比較2.png' %><br><br>
	class Main {<br>
	  public static void main(String[] args) {<br>
	    // 8と5を比較し、falseとなるようにしてください<br>
	    System.out.println(8 < 5);<br>
	    // 3と2を比較し、trueとなるようにしてください<br>
	    System.out.println(3 >= 2);<br>
	  }<br>
	}
</div>

<div style="padding: 100px 0 100px 0;">
	論理演算子は「かつ」「または」「~でない」を表現する記号です。
	まずは「かつ」について見てみましょう。
	「かつ」は&&で表現し、「条件1 && 条件2」は「条件1がtrueかつ条件2もtrue」であれば結果もtrueになり、どちらか一方でもfalseであれば結果はfalseになります。
	<%= image_tag '「かつ」1.png' %><%= image_tag '「かつ」2.png' %><br>
	「または」は||で表現し、「条件1 || 条件2」は、「条件1または条件2のどちらか一方でもtrue」であれば結果はtrueになります。具体例を下図で確認してみましょう。
	<%= image_tag '「または」1.png' %><%= image_tag '「または」2.png' %><br>
	!を用いると、「〜でない」を表現できます。例えば、!(x >= 30)は「xが30以上でない（つまり30より小さい）」ときtrueになり、「xが30以上」のときfalseになります。
	<%= image_tag '「〜でない」1.png' %><%= image_tag '「〜でない」2.png' %><br>
	論理演算子で重要な2つの例を、下図の単純な出力で見比べてみましょう。
	&&は、どちらもtrueでなければ全体の結果はtrueになりませんが、||は、どちらか一方でもtrueであれば全体の結果もtrueになります。このことをしっかり覚えておけば、論理演算子は怖くありません。
	<%= image_tag '論理演算子.png' %><br><br>
	class Main {<br>
	  public static void main(String[] args) {<br>
	    // trueと出力されるようにしてください<br>
	    System.out.println(true || false);<br>
	    // falseと出力されるようにしてください<br>
	    System.out.println(false && true);<br>
	    // 「8 < 5」かつ「3 >= 2」の結果を出力してください<br>
	    System.out.println(8 < 5 && 3 >= 2 );<br>
	    // 「8 < 5」または「3 >= 2」の結果を出力してください<br>
	    System.out.println(8<5 || 3>=2 );<br>
	    // 「8 < 5」でない、の結果を出力してください<br>
	    System.out.println( !(8<5) );<br>
	  }<br>
	}
</div>

<div style="padding: 100px 0 100px 0;">
	if条件分岐
	プログラミングでは、「特定の状況のときだけある処理を行う」ということがよくあります。このようなプログラムを条件分岐といいます。例えば日常生活でも「雨だったら、傘をもっていく」という条件分岐を行いますよね。条件分岐はプログラミングで必須の知識なので使いこなせるようになりましょう！
	<%= image_tag '条件分岐とは.png' %><br>
	最もよく使う条件分岐はif文です。ifは英語で「もし〜なら」という意味です。この「〜」に当たる部分が、ifの後の()の部分です。これを条件式と呼びます。条件式がtrueなら{}内の処理を行い、反対に条件式がfalseなら何もしません。まずはif文の()に条件式を入れ、{}の中に処理を書く、ということを覚えましょう。
	<%= image_tag 'if文1.png' %><%= image_tag 'if文2.png' %><br>
	if文の実際の使い方を見てみましょう。ここまでで学んだ、真偽値、比較演算子（==, < など）、論理演算子（&&, ||, ! ）が、条件式で活躍します.
	<%= image_tag 'if文の例1.png' %><%= image_tag 'if文の例2.png' %><br>
	if文で{ }という記号を使っています。詳しくはまだ知らなくて大丈夫ですが、これをブロックと呼び、複数の処理をまとめたいときに使うというぐらいに覚えておきましょう。if文では、条件がtrueのときに行う処理を、ブロックを使ってまとめています。なお{ }の後ろにはセミコロンは不要です。
	<%= image_tag 'ブロック1.png' %><%= image_tag 'ブロック2.png' %><br><br>
	class Main {<br>
	  public static void main(String[] args) {<br>
	    // 条件式に直接trueをいれてください<br>
	    if (true) {<br>
	      System.out.println("条件式がtrueのため、出力されます");<br>
	    }<br>
	    // 条件式に直接falseをいれてください<br>
	    if (false) {<br>
	      System.out.println("条件式がfalseのため、出力されません");<br>
	    }<br>
	    int x = 5;<br>
	    // if文を用いて、変数xが2より大きいとき「xは2より大きい」と出力してください<br>
	    if (x > 2){<br>
	      System.out.println("xは2より大きい");<br>
	    }<br>
	    // if文を用いて、変数xが8より大きいとき「xは8より大きい」と出力してください<br>
	    if (x>8){<br>
	      System.out.println("xは8より大きい");<br>
	    }<br>
	  }<br>
	}
</div>

<div style="padding: 100px 0 100px 0;">
	elseとは英語で「そのほかの」というような意味です。ifとelseを組み合わせると、「もし〜なら◯◯、そうでなければ△△」という条件分岐が可能になります。ifとelseを使った構文は下図になります。{ }の位置などしっかり覚えましょう。
	<%= image_tag 'else1.png' %><%= image_tag 'else2.png' %><br>
	if文ではelse ifを用いて、さらなる条件分岐が可能です。ifとelse if、elseを組み合わせると、「もし〜なら◯◯、そうではなくてもし××なら△△、どちらでもない場合は□□」という条件分岐を実現できます。下図の2つの例で、それぞれどの処理が実行されるのか確認しておきましょう！
	<%= image_tag 'else if1.png' %><%= image_tag 'else if2.png' %><br>
	else ifは必要なだけ並べることができますが、複数の条件に合致しても、実行されるのは最初に合致した条件だけなので注意しましょう。
	<%= image_tag '実行される処理.png' %><br><br>
	class Main {<br>
	  public static void main(String[] args) {<br>
	    int number = 12;<br>
	    // numberが20より小さいとき、どちらでもないときの条件分岐を追加してください<br>
	    if (number < 10) {<br>
	      System.out.println("10より小さい");<br>
	    }<br>
	    else if (number <20){<br>
	      System.out.println("10以上、20より小さい");<br>
	    }<br>
	    else{<br>
	      System.out.println("20以上");<br>
	    }<br>
	  }<br>
	}
</div>

<div style="padding: 100px 0 100px 0;">
	条件分岐にはswitch文という構文もあります。switch文は下図のように記述し、条件の値がcaseの値と一致するとき、処理が実行されます。
	switch文は構文が少し複雑です。caseの後ろのコロン（:）などは忘れがちなので注意しましょう。breakについては後述します。
	<%= image_tag 'switch文.png' %><br>
	switch文の具体例をif文と比較して見てみましょう。switch文では、()の中の条件の値と、caseの値が「==」になるとき、処理が実行されます。
	switch文は、「とある値（今回はx % 2）が何であるか」で処理を分けたいとき（特にその分岐が多いとき）、
	if文よりシンプルに書くことができます。使うことも多いので、ぜひ覚えておきましょう。
	<%= image_tag 'if文とswitch文1.png' %><%= image_tag 'if文とswitch文2.png' %><br>
	switch条件分岐break
	switch文ではbreakが非常に重要です。breakとはswitch文を終了する命令です。breakがないと、合致したcaseの処理を行った後、その次のcaseの処理も実行してしまいます。意図せぬ処理が起こってしまいますので、switch文を使うときにはbreakを忘れないように気をつけましょう。
	<%= image_tag 'break1.png' %><%= image_tag 'break2.png' %><br><br>
	class Main {<br>
	  public static void main(String[] args) {<br>
	    int number = 12;<br>
	    // switch文を用いて、numberを3で割った余りで条件分岐をしてください<br>
	    switch (number % 3){<br>
	      case 0:<br>
	        System.out.println("3で割り切れます");<br>
	        break;<br>
	      case 1:<br>
	        System.out.println("3で割ると1余ります");<br>
	        break;<br>
	      case 2:<br>
	        System.out.println("3で割ると2余ります");<br>
	        break;<br>
	    }<br>
	  }<br>
	}
</div>

<div style="padding: 100px 0 100px 0;">
	switch文では、どのcaseとも一致しなかったときに実行する処理を、defaultに指定することができます。これはif文のelseに似ています。
	<%= image_tag 'default1.png' %><%= image_tag 'default2.png' %><br>
	条件分岐から離れ、インデントについて学習しましょう。インデントとは先頭の字下げのことです。左の図では、どこからどこまでがどのcaseに対応するか、わかりにくいですよね。前後の関係性や入れ子構造を見やすくするため、インデントを整えるのも大事なスキルです。なお、先頭の字下げは半角スペース2つがおすすめです。意識していきましょう。
	<%= image_tag 'インデント1.png' %><%= image_tag 'インデント2.png' %><br><br>
	class Main {<br>
	  public static void main(String[] args) {<br>
	    int number = 13;<br>
	    // defaultを用いて、どのcaseにも合致しない場合の処理を記述してください<br>
	    switch (number % 5) {<br>
	      case 0:<br>
	        System.out.println("大吉です");<br>
	        break;<br>
	      case 1:<br>
	        System.out.println("中吉です");<br>
	        break;<br>
	      case 4:<br>
	        System.out.println("凶です");<br>
	        break;<br>
	      default:<br>
	        System.out.println("吉です");<br>
	        break;<br>
	    }<br>
	  }<br>
	}
</div>

<div style="padding: 100px 0 100px 0;">
	繰り返し処理とは、一定の処理を自動で繰り返し行う処理のことです。たとえば、1~100までの数字をコンソールに出力したい場合、下図のようにSystem.out.println()を100回書くのは面倒です。こういった処理を自動化するのが繰り返し処理です。<br>
	繰り返し処理の代表的なものにwhile文というのがあります。whileとは「〜の間」という意味の英語です。while文は下図のように書き、「条件がtrueの間、{ }内の処理を繰り返す」ことができます。
	<%= image_tag 'while文.png' %><br>
	下図で、繰り返し処理の流れを見てみましょう。まずwhile文の前で変数の初期化を行います。この変数は、while文を繰り返すかどうか判断するために用います。処理が一周終わると、その度に変数は更新され、再び条件式がチェックされます。trueであればもう一周処理を行い、falseであれば繰り返しが終了します。
	<%= image_tag 'while文の処理の流れ1.png' %><%= image_tag 'while文の処理の流れ2.png' %><br>
	while文の具体例を見てみましょう。下図はにんじゃわんこが5回ジャンプを繰り返すプログラムです。まずはwhile文の外で変数を用意し、ジャンプをする度にその変数に1を足していきます。そうすると6回目の繰り返しでwhileの条件がfalseになり、繰り返し処理が終了します。
	<%= image_tag 'while文の使用例1.png' %><%= image_tag 'while文の使用例2.gif' %><br>
	先ほどのwhile文で最後に変数iに1を足し忘れると変数iは1のまま変わらず、条件が永遠にtrueになってしまうので、繰り返し処理が無限に行われてしまいます（無限ループ）。無限ループはコンピュータに異常な負荷をかけることになるので、確実に阻止しなければなりません。繰り返し処理では、必ずどこかで条件がfalseになるように実装しましょう。
	<%= image_tag '無限ループ1.png' %><%= image_tag '無限ループ2.png' %><br><br>
	class Main {<br>
	  public static void main(String[] args) {<br>
	    int number = 10;<br>
	    // while文を用いて、numberが0より大きい場合に繰り返す、繰り返し処理を作ってください<br>
	    while (number > 0) {<br>
	      System.out.println(number);<br>
	      number--;  //デクリメント、１ずつ減らす<br>
	    }<br>
	  }<br>
	}
</div>

<div style="padding: 100px 0 100px 0;">
	for文も繰り返し処理の1つです。for文では、forの後の()内に、「変数の初期化、条件式、変数の更新」の3つを記述します。それぞれはセミコロン（;）で区切りますが、最後の変数の更新にはセミコロン（;）をつけないことに注意してください。while文と比較して覚えてしまいましょう。
	<%= image_tag 'for文1.png' %><%= image_tag 'for文2.png' %><%= image_tag 'for文3.png' %><br>
	前回学習した、にんじゃわんこが5回ジャンプするwhile文の例を、for文で書きかえてみましょう。繰り返し処理は、while文・for文どちらでも実装できますが、for文の方がすっきりと書けることが多いです。どちらでも記述できるようにしておきましょう。
	<%= image_tag 'for文の使用例.png' %><br><br>
	class Main {<br>
	  public static void main(String[] args) {<br>
	    // for文を用いて、繰り返し処理をつくってください<br>
	    for( int i = 1; i <= 10; i++ ){  //i++の後は;はいらない <br>
	      System.out.println(i + "回目のループです");<br>
	    }<br>
	  }<br>
	}
</div>

<div style="padding: 100px 0 100px 0;">
	繰り返し処理を終了するためには、条件をfalseにする以外に、breakを使って強制的に終了させる方法があります。下図のようにif文などの条件分岐と組み合わせることで、任意の箇所で繰り返し処理を終了させることができます。
	<%= image_tag 'forのbreak1.png' %><%= image_tag 'forのbreak2.png' %><br>
	繰り返し処理を終了するbreakと違い、continueはその周の処理だけをスキップして、次の周を実行することができます。continueもif文などと組み合わせて利用するのが一般的です。
	<%= image_tag 'continue1.png' %><%= image_tag 'continue2.png' %><br><br>
	class Main {<br>
	  public static void main(String[] args) {<br>
	    System.out.println("=== while文 ===");<br>
	    int i = 1;<br>
	    while (i < 10) {<br>
	      // iが5の倍数のとき、繰り返し処理を終了してください<br>
	      if (i % 5 == 0) {<br>
	        break;<br>
	      }<br>
	      System.out.println(i);<br>
	      i++;<br>
	    }<br>
	    <br>
	    System.out.println("=== for文 ===");<br>
	    for (int j = 1; j < 10; j++) {<br>
	      // jが3の倍数のとき、処理をスキップしてください<br>
	      if (j % 3 == 0) {<br>
	        continue;<br>
	      }<br>
	      System.out.println(j);<br>
	    }<br>
	  }<br>
	}
</div>

<div style="padding: 100px 0 100px 0;">
	配列とは、変数のセットのようなものです。変数が1つしか値を扱えないのに対し、配列は複数の値をまとめていれておくことができます。配列は仕切りのある箱のようなもので、それぞれのスペースに値が入っています。配列に入っているそれぞれの値のことを要素と呼びます。
	<%= image_tag '配列とは1.png' %><%= image_tag '配列とは2.png' %><br>
	配列を扱う場合には、配列型の変数に配列を代入します。配列型は、「int型の要素を持つ配列型」「String型の要素を持つ配列型」という風に指定する必要があります。
	int型の要素を持つ配列はint[], String型の要素を持つ配列はString[]と記述します。
	<%= image_tag '配列の定義.png' %><br>
	配列は{ }の中に、コンマ（,）で区切りながら値を書くことでつくることができます。下図で配列型の変数に配列を代入しています。[]と{}を混同しないように注意しましょう。
	<%= image_tag '配列の作り方1.png' %><%= image_tag '配列の作り方2.png' %><br>
	配列の要素には、前から順に「0, 1, 2・・・」と数字が割り振られています。これをインデックス番号といいます。インデックス番号は0から始まる点に注意してください。
	配列の各要素は、配列名[インデックス番号]とすることで取得することができます。
	<%= image_tag 'インデックス番号と要素の取得1.png' %><%= image_tag 'インデックス番号と要素の取得2.png' %><br><br>
	class Main {<br>
	  public static void main(String[] args) {<br>
	    // 変数namesに、配列を代入してください<br>
	    String[] names = {"にんじゃわんこ", "ひつじ仙人", "ベイビーわんこ"};<br>
	    // インデックス番号が0の要素を出力してください<br>
	    System.out.println(names[0]);<br>
	    // インデックス番号が2の要素を出力してください<br>
	    System.out.println(names[2]);<br>
	  }<br>
	}
</div>

<div style="padding: 100px 0 100px 0;">
	配列の各要素は変数のようなものです。
	下図のように、特定の要素に値を代入することで、要素を上書きすることが可能です。
	<%= image_tag '配列の要素を 上書きする1.png' %><%= image_tag '配列の要素を 上書きする2.png' %><br>
	下図のように、配列では存在しない要素に値を代入することはできないので注意してください。
	<%= image_tag '要素の上書きにおける注意点.png' %><br><br>
	class Main {<br>
	  public static void main(String[] args) {<br>
	    // 変数languagesを定義し、配列を代入してください<br>
	    String[] languages = {"Ruby", "PHP", "Python"};<br>
	    // インデックス番号が「1」の要素を出力してください<br>
	    System.out.println(languages[1]);<br>
	    // インデックス番号が「1」の要素を「Java」で上書きしてください<br>
	    languages[1] = "Java";<br>
	    // インデックス番号が「1」の要素を出力してください<br>
	    System.out.println(languages[1]);<br>
	  }<br>
	}
</div>

<div style="padding: 100px 0 100px 0;">
	配列では、下図のように、それぞれの要素に対し同様の処理を行うことがしばしばあります。これは先ほど学んだ繰り返し処理を用いることで容易に実現できます。ここからは、配列に対して繰り返し処理を行う方法を見ていきましょう。
	<%= image_tag '配列と繰り返し.gif' %><br>
	配列namesの要素を全て出力するために、左の図のように書くのは非常に面倒です。これをfor文で書いてみると右の図のようになります。このようにすれば配列の要素の値を簡単に一覧表示できるようになります。
	<%= image_tag '配列とfor文1.png' %><%= image_tag '配列とfor文2.png' %><br>
	配列には、要素の数を数えるlengthという機能が備わっています。lengthは、「配列.length」のようにドット（.）でつないで用います。lengthを用いれば、先ほどのfor文の条件式「i < 3」を下図のように書き換えることができ、配列の要素数を気にする必要がなくなります。
	<%= image_tag 'length1.png' %><%= image_tag 'length2.png' %><br><br>
	class Main {<br>
	  public static void main(String[] args) {<br>
	    String[] names = {"にんじゃわんこ", "ひつじ仙人", "ベイビーわんこ"};<br>
	    // for文を用いて、「私の名前は◯◯です」と出力してください<br>
	    for (int i = 0; i < names.length; i++){<br>
	      System.out.println("私の名前は" + names[i] + "です");<br>
	    }<br>
	  }<br>
	}
</div>

<div style="padding: 100px 0 100px 0;">
	for文は配列用に特別な構文（拡張for文）を用意しています。これを使えば、先ほどのfor文をよりシンプルに書くことができます。拡張for文は下図のように記述します。
	<%= image_tag '拡張for文の用法.png' %><br>
	拡張for文では、配列の各要素の値を順に代入する変数を用意します。具体例とイメージ図を見てみましょう。
	下図の例では、繰り返しの度に、変数nameに配列namesの要素が順に代入されていきます。また拡張for文では、自動的に要素の数だけ繰り返しが行われます。2枚の図をしっかり覚えましょう。
	<%= image_tag '拡張for文のイメージ1.png' %><%= image_tag '拡張for文のイメージ2.png' %><br>
	普通のfor文と比較し、拡張for文への書き換えができるようになりましょう。普通のfor文ではインデックス番号を用いて配列の要素を取得しなければなりませんが、拡張for文では変数に配列の要素自体が代入されます。拡張for文の方がシンプルに書けることが多いので覚えておきましょう。
	<%= image_tag '普通のfor文との比較1.png' %><%= image_tag '普通のfor文との比較2.png' %><br><br>
	class Main {<br>
	  public static void main(String[] args) {<br>
	    String[] names = {"にんじゃわんこ", "ひつじ仙人", "ベイビーわんこ"};<br>
	    // 配列用のfor文を用いて、「私の名前は◯◯です」と出力してください<br>
	    for(String name: names){  //変数名の後ろはただのコロン<br>
	       System.out.println("私の名前は" + name + "です");<br>
	    }<br>
	  }<br>
	}
</div>

<div style="padding: 100px 0 100px 0;">
	レッスンの最後に、課題を解いてみましょう。整数を要素に持つ配列の中で、「奇数の要素」と「偶数の要素」の和をそれぞれ求め、出力します。
	<%= image_tag 'Java2総合課題1.png' %><%= image_tag 'Java2総合課題2.png' %><br><br>
	class Main {<br>
	  public static void main(String[] args) {<br>
	    // 変数numbersに、与えられた数字の配列を代入してください<br>
	    int[] numbers = {1, 4, 6, 9, 13, 16};<br>
	    int oddSum = 0;<br>
	    int evenSum = 0;<br>
	    // for文を用いて、配列numbersの偶数の和と奇数の和を求めてください<br>
	    for(int number: numbers){<br>
	      if (number % 2 != 0) {  //2で割って余りが0以外(余りは必ず1)=奇数<br>
	        oddSum += number;  //addSumにプラスしていく<br>
	      }<br>
	      else {  //2で割って余りが0=偶数<br>
	        evenSum += number;  //addSumにプラスしていく<br>
	      }<br>
	    }<br>
	    System.out.println("奇数の和は" + oddSum + "です");<br>
	    System.out.println("偶数の和は" + evenSum + "です");<br>
	  }<br>
	}
</div>

<div style="padding: 100px 0 100px 0;">
</div>

<div style="padding: 100px 0 100px 0;">
</div>

<div style="padding: 100px 0 100px 0;">
</div>

<div style="padding: 100px 0 100px 0;">
</div>

<div style="padding: 100px 0 100px 0;">
next→<%= link_to 'Progate/Javaコース2', java_part2_path %>
</div>
<%= link_to 'Home', root_path %>
<%= link_to 'Progate/HTML&CSS初級編', htmlcss_first_path %>
<%= link_to 'Progate/Javaコース1', java_path %>
<%= link_to 'Progate/Javaコース2', java_part2_path %>



<h1>Java　コース1</h1>

<div style="padding: 100px 0 100px 0;">
	System.out.println();というのは、「()の中身を出力（表示）せよ」という「命令」
	("Hello World")などで表示される。""がないと出力されない
	Javaでは文の終わりにセミコロン（;）を付けなければなりません
	<br><br>
	class Main {<br>
	  public static void main(String[] args) {<br>
	    // この文章をコメントにしてください<br>
	    // 「こんにちは、Java」と出力してください<br>
	    System.out.println("こんにちは、Java");<br>
	  }<br>
	}
</div>

<div style="padding: 100px 0 100px 0;">
	文字列の"3"と数値の3（" "で囲まない）は別物として扱われます。また下図のように、5 + 2は7になりますが、"5 + 2"はそのまま「5 + 2」という文字列として出力されます。
	<br><br>
	class Main {<br>
	  public static void main(String[] args) {<br>
	    // 数値の17を出力してください<br>
	    System.out.println(17);<br>
	    // 5に3を足した値を出力してください<br>
	    System.out.println(5 + 3);<br>
	    // 「5 + 3」を文字列として出力してください<br>
	    System.out.println("5+3");<br>
	  }
	}
</div>

<div style="padding: 100px 0 100px 0;">
	「%」（パーセント）で、割り算の余りを計算することができます。
	<br><br>
	class Main {<br>
	  public static void main(String[] args) {<br>
	    // 12を3で割った値を出力してください<br>
	    System.out.println(12/3);<br>
	    // 3に6を掛けた値を出力してください<br>
	    System.out.println(3*6);<br>
	    // 8を3で割った時の余りを出力してください<br>
	    System.out.println(8%3);<br>
	  }<br>
	}
</div>

<div style="padding: 100px 0 100px 0;">
	文字列を「足し算」すると、下図のように文字列を連結することができます。よって、下図にもあるように、"5" + "3"は2つの文字列を連結し、"53"となります。
	<br><br>
	class Main {<br>
	  public static void main(String[] args) {<br>
	    // "こんにちは"と"世界"を連結して出力してください<br>
	    System.out.println("こんにちは" + "世界");<br>
	    // "38"と"19"を連結して出力してください<br>
	    System.out.println("38" + "19");<br>
	    // 38と19を足して出力してください<br>
	    System.out.println(38 + 19);<br>
	  }<br>
	}
</div>

<div style="padding: 100px 0 100px 0;">
	Stringは文字の並び、intは整数(integer)を意味する英語です。なおString型のSは大文字、int型のiは小文字である点に注意しましょう<br>
	変数について学習します。難しく聞こえますが、データ（値）をいれておく箱だと思いましょう。またその箱（変数）には名前（変数名）がついており、その名前を用いていつでも変数から値を取り出すことができます。変数はプログラミングの必須の知識なので、しっかり理解していきましょう。<br>
	変数を使うには、まず変数を「定義」する必要があります。変数を定義することで値をいれる箱がつくられます。Javaで変数を定義するためには、①変数にいれる値のデータ型を指定する、②変数の名前を決める、という2つが必要です。<br>
	int型→int number;<br>
	String型→String name;<br>
	変数を定義したら変数に値を入れます。これを代入と呼びます。「変数名 = 値」とするだけで代入することができます。<br>
	「=」はプログラミングにおいて、右の値を左のものに代入するという意味です。数学のイコールのように「同じ」を意味するものではありません。<br>
	変数から値を取り出すのは難しくありません。下図では、System.out.println()の()に変数をいれると、変数の中に入っている値が出力されているのがわかります。<br>
	変数は値を一時的にいれる箱にすぎず、変数に対して何らかの処理を行うと、変数から値が取り出されて処理が行われます。<br>
	String name;
	name = "Sato";
	System.out.println(name);
	<br><br>
	class Main {<br>
	  public static void main(String[] args) {<br>
	    // int型の変数numberを定義してください<br>
	    int number;<br>
	    // 変数numberに3を代入してください<br>
	    number = 3;<br>
	    // 変数numberを出力してください<br>
	    System.out.println(number);<br>
	    // String型の変数nameを定義してください<br>
	    String name;<br>
	    // 変数nameに"Wanko"を代入してください<br>
	    name = "Wanko";<br>
	    // 変数nameを出力してください<br>
	    System.out.println(name);<br>
	  }<br>
	}
</div>

<div style="padding: 100px 0 100px 0;">
	下図の「int number = 3;」「String text = "Hello World";」のように、変数の値の代入は変数定義と同時に行うことができます。変数定義と同時に値を代入することを変数の初期化と呼びます。<br>
	数値が入った変数なら、数値と同様に計算が可能です。数値と変数の計算も、変数同士の計算もできます。<br>
	同様に文字列の入った変数であれば、文字列と同様に、文字列の連結を行うことが可能です。文字列が入っているからといって変数にダブルクォーテーションを付けてはいけません。付けてしまうと、変数ではなく文字列として扱われてしまうので注意しましょう
	<br><br>
	class Main {<br>
	  public static void main(String[] args) {<br>
	    int number1 = 3;<br>
	    // int型の変数number2を定義し、7を代入してください<br>
	    int number2 = 7;<br>
	    // number1 * number2を出力してください<br>
	    System.out.println(number1 * number2);<br>
	    // 変数textに「プログラミングを勉強しよう」を代入してください<br>
	    String text = "プログラミングを勉強しよう";<br>
	    // 「Progateで」と変数textを連結して出力してください<br>
	    System.out.println("Progateで" + text);<br>
	  }<br>
	}
</div>

<div style="padding: 100px 0 100px 0;">
	変数は、中に入っている値を変更することもできます。一度値を代入した変数に、その後再び値を代入すると、後で代入した値によって変数の中身が上書きされます。下図では、変数を途中で上書きしたことによって、出力結果が変わっています。<br>
	変数numberを上書きするために、左の図のように「int number = 5;」とするとエラーになります。これは、変数名の前にデータ型をつけると変数を定義しようとしますが、同じ処理内で同一名の変数を定義できないためです。上書きするときはデータ型をつけないように注意しましょう。
	<br><br>
	class Main {
	  public static void main(String[] args) {<br>
	    int number = 11;<br>
	    String text = "Ruby";<br>
	    System.out.println(number);<br>
	    System.out.println(text);<br>
	    // 変数numberを9で上書きしてください(intはいらない)<br>
	    number = 9;<br>
	    // 変数numberを出力してください<br>
	    System.out.println(number);<br>
	    // 変数textを「Java」で上書きしてください(Stringはいらない)<br>
	    text = "Java";<br>
	    // 変数textを出力してください<br>
	    System.out.println(text);<br>
	  }<br>
	}
</div>

<div style="padding: 100px 0 100px 0;">
	変数xに3が入っているとき、xの値に2を足して5に上書きしたい場合はどうすればよいでしょうか。この場合は、左の図のように変数xと2を足して、また変数xに代入します。不思議な式に見えますが、プログラミングでは「=」は代入なので問題はありません。よく使うので覚えておきましょう。
	またこのような代入を自己代入と呼びます。
	<br><br>
	class Main {<br>
	  public static void main(String[] args) {<br>
	    int number = 3;<br>
	    System.out.println(number);<br>
	    // 変数numberの値に7を足して、変数numberを上書きしてください<br>
	    number = number + 7;<br>
	    // 変数numberを出力してください<br>
	    System.out.println(number);<br>
	  }<br>
	}<br>
</div>

<div style="padding: 100px 0 100px 0;">
	自己代入には省略した書き方があります。よく使いますので、下図の省略系をしっかり覚えましょう。
	<%= image_tag '自己代入.png' %>
	変数に1を足す、もしくは1を引く場合は、さらなる省略系が存在します。
	「++」という記号は変数に「1を足す」という意味です。変数xに対してx++とするのは、x += 1と同じ意味になります。反対に--とすると1を引くことができます。便利な書き方なのでぜひ覚えておきましょう
	<%= image_tag '自己代入の省略.png' %>
	<br><br>
	class Main {<br>
	  public static void main(String[] args) {<br>
	    int number = 8;<br>
	    // 変数numberに7をかけて、変数numberを上書きしてください<br>
	    number = number * 7;<br>
	    // 変数numberを出力してください<br>
	    System.out.println(number);<br>
	    // 変数numberの値に1を足して、変数numberを上書きしてください<br>
	    number++;<br>
	    // 変数numberを出力してください<br>
	    System.out.println(number);<br>
	  }<br>
	}<br>
</div>

<div style="padding: 100px 0 100px 0;">
	なぜ変数を使うのでしょうか？実際に開発するときには、プログラムの中にありとあらゆる値が登場します。開発者はそれらを間違いがないように整理し、わかりやすくコードを書き、そしてすぐに変更できるようにしなければなりません。それを助けるための1つの仕組みが変数です。<br>
	<%= image_tag 'なぜ変数を使うのか.png' %><br>
	変数の使いどころを見てみましょう。左の図のように、重複する箇所が多い場合は、右の図のように変数にしておくと便利です。この文章が後で変更になったとしても、変数を用いていればその変数に代入する文字列を1箇所変更するだけで対応することができます。
	<%= image_tag '変数の役割1.png' %><%= image_tag '変数の役割2.png' %><br>
	変数にはいくつか決まりがあります。変数名は基本的に自由に決められますが、Javaでは下図のような決まりがあります。
	「userName」のように2語以上の変数名を使うときは、単語の始めを大文字にして区切りましょう。この記述法をキャメルケースと呼びます。
	<%= image_tag '変数の注意点1.png' %><%= image_tag '変数の注意点2.png' %><br>
	変数名を決めるときにまず大事なのは、何のデータをいれる変数なのかわかりやすい変数名をつけることです。何の値が入っている変数かわかりにくい名前は、コードが読みにくくなり、ミスを生む原因となります。わかりやすい変数名をつけるよう心がけましょう。
	<%= image_tag '変数名.png' %><br><br>
	class Main {<br>
	  public static void main(String[] args) {<br>
	    int length = 6;<br>
	    int height = 8;<br>
	    // 変数rectangleAreaに、四角形の面積を代入してください<br>
	    int rectangleArea = length * height;<br>
	    // 変数rectangleAreaを出力してください<br>
	    System.out.println(rectangleArea);<br>
	    // 変数triangleAreaに、三角形の面積を代入してください<br>
	    int triangleArea = length * height / 2;<br>
	    // 変数triangleAreaを出力してください<br>
	    System.out.println(triangleArea);<br>
	  }<br>
	}
</div>

<div style="padding: 100px 0 100px 0;">
	これまで数値は、int型（整数）しか使ってきませんでしたが、小数を表すデータ型も存在します。そのひとつがdouble型です。重要なデータ型なので覚えておきましょう。
	またJavaの世界にはまだ多くのデータ型が存在します。興味のある人は、「Java データ型」といった具合に調べてみてください。<br>
	<%= image_tag 'double型.png' %><br>
	整数とは「3」「-39」のように小数点以下を持たない数です。対して小数とは「3.28」「-5.7」のように小数点以下を持つ数になります。大きさは同じでも、3はint型ですが、3.0はdouble型になります。int型と同様に変数の定義ではデータ型にdoubleを指定します。
	<%= image_tag 'double型の変数1.png' %><%= image_tag 'double型の変数2.png' %><br>
	double型も数値ですので、下図のように計算が可能です。
	<%= image_tag '小数同士の計算1.png' %><%= image_tag '小数同士の計算2.png' %><br>
</div>

<div style="padding: 100px 0 100px 0;">
	「+」などの操作は同じデータ型同士でないとできません。よって型の違うものを演算するときは、型を変換し同じ型にしてあげます。
	Javaではこの型変換の方法として、自動の変換と手動の変換があります。まずは自動型変換を学びましょう。下図のようにString型とint型を足すと、int型が自動でString型に変換され、文字列の結合が行われます。
	<%= image_tag '型変換について1.png' %><%= image_tag '型変換について2.png' %><br>
	数値の自動型変換を学ぶ前に、数値計算における注意点を学びましょう。
	int型同士の計算は結果もint型になり、double型同士の計算は、結果もdouble型になります。下図でその事実を確認しましょう。特に、int型の5をint型の2で割ると、結果は「2.5」ではなく「2」となることに注意しましょう。
	<%= image_tag '数値の計算の注意点1.png' %><%= image_tag '数値の計算の注意点2.png' %><br>
	自動型変換の例を見てみましょう。int型とdouble型の計算では結果はdouble型になります。これは計算の過程でint型がdouble型に変換されるためです。よって「5 / 2.0」もしくは「5.0 / 2」の結果は2.5になります。5を5.0にするように、整数は必ず小数でも表せるため、Javaが自動で型変換を行ってくれます。
	<%= image_tag '計算時の自動型変換1.png' %><%= image_tag '計算時の自動型変換2.png' %><br><br>
	class Main {<br>
	  public static void main(String[] args) {<br>
	    int month = 12;<br>
	    int date = 31;<br>
	    // 「12月31日」となるように変数と文字列を連結して出力してください<br>
	    System.out.println(month + "月" + date + "日");<br>
	    // 7を2で割った値を出力してください<br>
	    System.out.println(7 / 2);<br>
	    // 7.0を2.0で割った値を出力してください<br>
	    System.out.println(7.0 / 2.0);<br>
	    // 7を2.0で割った値を出力してください<br>
	    System.out.println(7 / 2.0);<br>
	  }<br>
	}
</div>

<div style="padding: 100px 0 100px 0;">
	先ほどint型同士の計算「5 / 2」は2になってしまうことを学びましたが、それでは下図のようにint型の変数同士の割り算で、正確な値を出したいときはどうすればよいでしょうか？<br>
	<%= image_tag 'int型同士の計算1.png' %><%= image_tag 'int型同士の計算2.png' %>
	このようなときは強制的に型変換を行います。これをキャストと呼び、下図のように、(変換したいデータ型)値とします。
	int型同士の値から、最終的にdouble型の計算結果を得たい場合、どちらか1つをキャストしてあげましょう（前ページで学んだように、片方がdouble型であれば結果はdouble型になります）。<br>
	<%= image_tag 'キャスト1.png' %><%= image_tag 'キャスト2.png' %>
	<br><br>
	class Main {<br>
	  public static void main(String[] args) {<br>
	    int number1 = 7;<br>
	    int number2 = 2;<br>
	    System.out.println(number1 / number2);<br>
	    // number1をdouble型にキャストし、number2で割った値を出力してください<br>
	    System.out.println((double)number1 / number2);<br>
	  }<br>
	}
</div>

<div style="padding: 100px 0 100px 0;">
	レッスンの最後に、課題を解いてみましょう<br><br>
	class Main {<br>
	  public static void main(String[] args) {<br>
	    // 変数nameに、好きな名前を代入してください<br>
	    String name = "Taro";<br>
	    // 変数ageに、好きな年齢を代入してください<br>
	    int age = 20;<br>
	    // 変数heightに、好きな身長を代入してください（例: 1.2）<br>
	    double height = 1.2;<br>
	    // 変数weightに、好きな体重を代入してください（例: 20.0）<br>
	    double weight = 20.0;<br>
	    // 変数bmiに、BMIを計算して代入してください<br>
	    double bmi = weight / (height * height);<br>
	    // 名前、年齢、身長、体重、BMIに関する情報を出力してください<br>
	    System.out.println("名前は" + name + "です");<br>
	    System.out.println("年齢は" + age + "歳です");<br>
	    System.out.println("身長は" + height + "mです");<br>
	    System.out.println("体重は" + weight + "kgです");<br>
	    System.out.println("BMIは" + bmi + "です");<br>
	  }<br>
	}
</div>

<div style="padding: 100px 0 100px 0;">
next→<%= link_to 'Progate/Javaコース2', java_part2_path %>
</div>




<div style="padding: 20px 0 20px 0;">
	Home→<%= link_to 'Home', root_path %>
	<%= link_to 'Progate/HTML&CSS初級編', htmlcss_first_path %>
	first→<%= link_to 'Progate/Javaコース1', java_path %>
	prevbreak→<%= link_to 'Progate/Java道場コース2', java_advance_part2_path %>
	prev→<%= link_to 'Progate/Javaコース4', java_part4_path %>
</div>

<h1>Java　コース5</h1>


<div style="padding: 100px 0 100px 0;">
	継承を学ぼう
	このレッスンではJava学習Ⅳの練習コース「Java道場Ⅱ」で作り上げたプログラムを、
	オブジェクト指向の機能を用いて改善していきます。
	オブジェクト指向の本領が発揮されるのはここからです。
	まずは「継承」というオブジェクト指向の重要な機能を学びましょう。
	（「Java道場Ⅱ」を学習していない方は、ぜひそちらを先に学習してみましょう！）
	まずは「Java道場Ⅱ」の完成物を実行してみましょう。
	このレッスンで学ぶ「継承」という機能を知れば、この完成物を効率的に実装できるようになります。
	このプログラムでは以下の3つの入力を受け取ります。
	・自転車を走らせる距離（整数）
	・車を走らせる距離（整数）
	・車に給油する量（整数）
	「○○を入力してください：」と表示されたら好きな整数値を入力してください。
	「確認して次へ」を押して、先へ進みましょう。
</div>

<div style="padding: 100px 0 100px 0;">
	CarクラスとBicycleクラスは、下図のように重複があります。コードの重複は保守性（修正・改善のしやすさ）を下げるため、できるだけ避けるべきです。
	またCarクラスとBicycleクラスはどちらも「乗り物」です。下図の重複部分はCarとBicycleの独自機能というよりは、「乗り物一般」に共通する情報と振る舞いであるといえるでしょう。
	<%= image_tag 'CarとBicycleの重複1.png' %><%= image_tag 'CarとBicycleの重複2.png' %><br>
	オブジェクト指向では、あるクラスの内容を他のクラスが「引き継ぐ」ことができます。
	先ほどの重複部分を、Vehicleクラス（乗り物）に定義し、そのクラスをCarクラスとBicycleクラスが引き継ぐことができれば、重複部分をなくすことができそうですね。この方法をこれから学んでいきましょう。
	<%= image_tag 'クラスの内容を引き継ぐ.png' %><br>
	既存のクラスのフィールドやメソッドを別のクラスに引き継ぐ機能を「継承」といいます。さらに継承してできる新しいクラスには独自のフィールドやメソッドを追加してカスタマイズすることも可能です。
	継承されるクラスを「スーパークラス」、継承してできる新しいクラスを「サブクラス」と呼びます。
	<%= image_tag '継承.png' %><br>
	継承を用いて新しくサブクラスを定義するときは、「extends」を用いて右の図のように「class サブクラス名 extends スーパークラス名」としてクラスを定義します。
	extendsは「拡張する」という意味です。継承は、スーパークラスを元に、機能を拡張したサブクラスを作るための機能なのです。
	<%= image_tag '継承の方法1.png' %><%= image_tag '継承の方法2.png' %><br>
	[Main.java]
	class Main {
	  public static void main(String[] args) {
	    Car car = new Car();
	    Bicycle bicycle = new Bicycle();
	  }
	}
	[Car.java]
	// ③Vehicleクラスを継承してください
	class Car extends Vehicle {
	  // 共通のコードをVehicleクラスに移動してください(コードは消す)
	}
	[Bicycle.java]
	// ④Vehicleクラスを継承してください
	class Bicycle extends Vehicle {
	  // 共通のコードをVehicleクラスに移動してください(共通コードは省略)
	}
	[Vehicle.java]
	// ①Vehicleクラスを定義し、CarクラスとBicycleクラスの共通部分を移動してください
	class Vehicle {
	  // ②CarクラスとBicycleクラスの重複部分をVehicleクラスに移動してください。
	  private String name;
	  private String color;
	  private int distance = 0;
	  public String getName() {
	    return this.name;
	  }
	  public String getColor() {
	    return this.color;
	  }
	  public int getDistance() {
	    return this.distance;
	  }
	  public void setName(String name) {
	    this.name = name;
	  }
	  public void setColor(String color) {
	    this.color = color;
	  }
	  public void printData() {
	    System.out.println("名前：" + this.name);
	    System.out.println("色：" + this.color);
	    System.out.println("走行距離：" + this.distance + "km");
	  }
	}
</div>

<div style="padding: 100px 0 100px 0;">
	Carクラス（サブクラス）はVehicleクラス（スーパークラス）のフィールドとメソッドを引き継いでいます。よって、Carクラス自体にはまだ何も定義されていませんが、Carクラスのインスタンスに対して、Vehicleクラスのインスタンスメソッドを呼び出すことが可能です。
	<%= image_tag 'スーパークラスのメソッドを呼び出す1.png' %><%= image_tag 'スーパークラスのメソッドを呼び出す2.png' %><br>
	[Main.java]
	class Main {
	  public static void main(String[] args) {
	    Car car = new Car();
	    // ①setNameメソッドを用いて、carの名前を「フェラーリ」にしてください
	    car.setName("フェラーリ");
	    // ②setColorメソッドを用いて、carの色を「赤」にしてください
	    car.setColor("赤");
	    Bicycle bicycle = new Bicycle();
	    // ③setNameメソッドを用いて、bicycleの名前を「ビアンキ」にしてください
	    bicycle.setName("ビアンキ");
	    // ④setColorメソッドを用いて、bicycleの色を「緑」にしてください
	    bicycle.setColor("緑");
	    System.out.println("【車の情報】");
	    car.printData();
	    System.out.println("=================");
	    System.out.println("【自転車の情報】");
	    bicycle.printData();
	  }
	}
	[Car.java][Bicycle.java][Vehicle.java]
	前回から変更なし、省略
</div>

<div style="padding: 100px 0 100px 0;">
	サブクラスには、スーパークラスにない独自のフィールドやメソッドを追加し、カスタマイズすることができます。
	インスタンスフィールドfuelはCarクラスに独自のフィールドです。fuelというフィールドと、そのゲッターをCarクラスに定義してあげましょう。
	なお「道場Ⅱ」で実装したchargeメソッドもここで定義しましょう。
	<%= image_tag 'サブクラスのフィールドとメソッド.png' %><br>
	サブクラスのインスタンスは、自身のクラスに定義したメソッドだけでなく、スーパークラスのメソッドも呼び出すことができます。
	一方スーパークラスのインスタンスはサブクラスのメソッドを呼びだすことはできません。クラスの継承は一方的なため、スーパークラスはサブクラスのメソッドを見つけることはできずエラーが発生してしまいます。
	<%= image_tag 'メソッド呼び出しの注意点1.png' %><%= image_tag 'メソッド呼び出しの注意点2.png' %><br>
	サブクラスのインスタンスに対して、メソッドを呼ぶ際には図のようにメソッドが呼ばれます。
	呼び出したメソッドが、サブクラスに定義されていればサブクラスから、定義されていなければスーパークラスから呼び出されます。
	<%= image_tag 'メソッド呼び出しの仕組み.png' %><br>
	[Main.java]
	import java.util.Scanner;
	class Main {
	  public static void main(String[] args) {
	    Scanner scanner = new Scanner(System.in);
	    Car car = new Car();
	    car.setName("フェラーリ");
	    car.setColor("赤");
	    Bicycle bicycle = new Bicycle();
	    bicycle.setName("ビアンキ");
	    bicycle.setColor("緑");
	    System.out.println("【車の情報】");
	    car.printData();
	    // ④getFuelメソッドを用いて「ガソリン量：◯◯L」と出力してください
	    System.out.println("ガソリン量:" + car.getFuel() + "L");
	    System.out.println("-----------------");
	    System.out.print("給油する量を入力してください：");
	    int litre = scanner.nextInt();
	    // ⑤chargeメソッドを呼び出して、引数にlitreを渡してください
	    car.charge(litre);
	    System.out.println("=================");
	    System.out.println("【自転車の情報】");
	    bicycle.printData();
	  }
	}
	[Car.java]
	class Car extends Vehicle {
	  // ①インスタンスフィールドfuelを定義してください
	  private int fuel = 50;
	  // ②fuelフィールドのゲッターを定義してください
	  public int getFuel() {
	    return this.fuel;
	  }
	  // ③インスタンスメソッドchargeを定義してください
	  public void charge(int litre) {
	    System.out.println(litre + "L給油します");
	    if (litre <= 0) {
	      System.out.println("給油できません");
	    } else if (litre + this.fuel >= 100) {
	      System.out.println("満タンまで給油します");
	      this.fuel = 100;
	    } else {
	      this.fuel += litre;
	    }
	    System.out.println("ガソリン量：" + this.fuel + "L");
	  }
	}
	[Bicycle.java][Vehicle.java]
	変更なし、省略
</div>

<div style="padding: 100px 0 100px 0;">
	スーパークラスから継承しているメソッドの処理を、特定のサブクラスでカスタマイズしたいという場合を考えてみましょう。
	例えば下図のように、Carクラスのインスタンスに対してprintDataメソッドを呼び出すときは、ガソリン量も表示したいとします。
	<%= image_tag 'メソッドのカスタマイズ1.png' %><%= image_tag 'メソッドのカスタマイズ2.png' %><br>
	スーパークラスから継承したメソッドと同名のメソッドをサブクラスに定義することで、スーパークラスのメソッドの内容を上書きすることができます。これを「オーバーライド」といいます。
	すなわち、CarクラスにもprintDataメソッドを定義すると、VehicleクラスのprintDataメソッドが上書きされます。
	<%= image_tag 'メソッドのオーバーライド オーバーライド1.png' %><%= image_tag 'メソッドのオーバーライド オーバーライド2.png' %><br>
	サブクラスのインスタンスに対してメソッドを呼び出すと、まずサブクラスの中でそのメソッドを探し、持っていればそのメソッドを呼び出します。
	つまりスーパークラスと同名のメソッドがサブクラスにあれば、それが実行されるので、結果的にメソッドの内容が上書きされたようになります（ここではCarクラスに定義したprintDataメソッドが呼ばれる）。
	<%= image_tag 'オーバーライドの仕組み.png' %><br>
	CarクラスのprintDataメソッドではfuelの出力を加えるだけですが、fuel以外のname, color, distanceフィールドの出力にも注意が必要です。
	これらは、Vehicleクラスにprivateなフィールドとして定義されており、外部のクラスであるCarクラスから直接アクセスすることはできません（カプセル化）。fuel以外のフィールドはゲッターを用いて取得するようにしましょう。
	<%= image_tag 'フィールドへのアクセス制限1.png' %><%= image_tag 'メソッドのカスタマイズ2.png' %><br>
	[Main.java]
	import java.util.Scanner;
	class Main {
	  public static void main(String[] args) {
	    Scanner scanner = new Scanner(System.in);
	    Car car = new Car();
	    car.setName("フェラーリ");
	    car.setColor("赤");
	    Bicycle bicycle = new Bicycle();
	    bicycle.setName("ビアンキ");
	    bicycle.setColor("緑");
	    System.out.println("【車の情報】");
	    car.printData();
	    // ③「ガソリン量：○○L」と出力している箇所を消してください
	    System.out.println("-----------------");
	    System.out.print("給油する量を入力してください：");
	    int litre = scanner.nextInt();
	    car.charge(litre);
	    System.out.println("=================");
	    System.out.println("【自転車の情報】");
	    bicycle.printData();
	  }
	}
	[Car.java]
	class Car extends Vehicle {
	  private int fuel = 50;
	  public int getFuel() {
	    return this.fuel;
	  }
	  // ①printDataメソッドを定義してください
	  // ②printDataメソッドで、順番に・名前：○○　・色：✕✕　・走行距離：□□km　・ガソリン量：△△Lと出力してください。
	  public void printData() {
	    System.out.println("名前：" + this.getName() );  //colorフィールドのゲッターを用いてください、nameの値を取得するために、thisに対してgetNameメソッドを用いてください
	    System.out.println("色：" + this.getColor() );  //colorフィールドのゲッターを用いてください、colorの値を取得するために、thisに対してgetColorメソッドを用いてください
	    System.out.println("走行距離：" + this.getDistance() + "km" );
	    System.out.println("ガソリン量：" + this.fuel + "L");
	  }
	  public void charge(int litre) {
	    System.out.println(litre + "L給油します");
	    if (litre <= 0) {
	      System.out.println("給油できません");
	    } else if (litre + this.fuel >= 100) {
	      System.out.println("満タンまで給油します");
	      this.fuel = 100;
	    } else {
	      this.fuel += litre;
	    }
	    System.out.println("ガソリン量：" + this.fuel + "L");
	  }
	}
	[Bicycle.java Vehicle.java]
	前回同様のため省略
</div>

<div style="padding: 100px 0 100px 0;">
	先ほどのprintDataメソッドのオーバーライドには重複があります。
	CarクラスのprintDataメソッドは、ガソリン量を表示している箇所以外は、処理が重複しています。このコードの重複はなくしてあげましょう。
	<%= image_tag 'メソッド内の重複1.png' %><%= image_tag 'メソッド内の重複2.png' %><br>
	「super.メソッド名()」とすると、サブクラスのインスタンスメソッドから、スーパークラスのインスタンスメソッドを呼び出すことができます。
	これを使えば、CarクラスのprintDataメソッドで、ガソリン量を表示する箇所以外の処理はVehicleクラスのprintDataメソッドを呼び出すことで代用することができます。
	<%= image_tag 'スーパークラスのメソッドを呼ぶ1.png' %><%= image_tag 'スーパークラスのメソッドを呼ぶ2.png' %><br>
	[Car.java]
	class Car extends Vehicle {
	  private int fuel = 50;
	  public int getFuel() {
	    return this.fuel;
	  }
	  public void printData() {
	    // ①superを用いて、以下の重複部分を書き換えてください
	    // System.out.println("名前：" + this.getName());
	    // System.out.println("色：" + this.getColor());
	    // System.out.println("走行距離：" + this.getDistance() + "km");
	    super.printData();
	    System.out.println("ガソリン量：" + this.fuel + " L");
	  }
	  public void charge(int litre) {
	    System.out.println(litre + "L給油します");
	    if (litre <= 0) {
	      System.out.println("給油できません");
	    } else if (litre + this.fuel >= 100) {
	      System.out.println("満タンまで給油します");
	      this.fuel = 100;
	    } else {
	      this.fuel += litre;
	    }
	    System.out.println("ガソリン量：" + this.fuel + "L");
	  }
	}
	[Main.java, Bicycle.java, Vehicle.java]
	前回同様のため省略
</div>



<div style="padding: 100px 0 100px 0;">
	
</div>

<div style="padding: 100px 0 100px 0;">
</div>

<div style="padding: 100px 0 100px 0;">
</div>

<div style="padding: 100px 0 100px 0;">
</div>

<div style="padding: 100px 0 100px 0;">
</div>

<div style="padding: 100px 0 100px 0;">
</div>

<div style="padding: 100px 0 100px 0;">
</div>

<div style="padding: 100px 0 100px 0;">
</div>

<div style="padding: 100px 0 100px 0;">
</div>

<div style="padding: 100px 0 100px 0;">
</div>

<div style="padding: 100px 0 100px 0;">
next→<%= link_to 'Progate/Javaコース5', java_part5_path %>
</div>
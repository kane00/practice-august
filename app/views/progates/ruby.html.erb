<div style="padding: 20px 0 20px 0;">
	Home→<%= link_to 'Home', root_path %>
	<%= link_to 'Progate/HTML&CSS初級編', htmlcss_first_path %>
	first→<%= link_to 'Progate/Rubyコース1', ruby_path %>
	prev→
</div>

<h1>Ruby　コース1</h1>

<div style="padding: 100px 0 100px 0;">
	Rubyを学ぼう
	Rubyの世界へようこそ！
	このレッスンでは、基本的なコードの書き方、変数、条件分岐などについて学んでいきます。
	初めて学ぶ方は、難しく感じることもあるかもしれませんが、
	焦らず着実に、Rubyのマスターに向けて学んでいきましょう。
</div>

<div style="padding: 100px 0 100px 0;">
	RubyはWEBアプリケーションの「システム」をつくるためのプログラミング言語です。 似たような言語として、PHPやPythonといったものがあります。
	<br><%= image_tag '/assets/Rubyとは.png' %><br>
	まずは、Rubyのコードを実行してみましょう。コンソールという部分に文字を出力（表示）します。
	「puts "○○"」というRubyのコードを書くと、putsの後の○○という文字がコンソールに出力されます。
	<br><%= image_tag '/assets/Rubyを実行しよう.png' %><br><%= image_tag '/assets/Rubyを実行しよう.png' %><br>
	[index.rb]<br>
	# 1行目の「Hello World」の部分を、Hello Rubyに書き換えてください<br>
	puts "Hello Ruby"<br>
</div>

<div style="padding: 100px 0 100px 0;">
	先ほど出力した「Hello World」は、プログラミングの世界で文字列と呼ばれます。文字列はクォーテーション（ ' もしくは " ）で囲みます。また、クォーテーションは必ず半角で記述しなければなりません。
	クォーテーションで囲んでいないとエラーが発生します。
	<br><%= image_tag '/assets/Rubyの基本と文字列-文字列1.png' %><%= image_tag '/assets/Rubyの基本と文字列-文字列2.png' %><br>
	先ほど用いたputsというのは、Rubyの「命令」の１つです。「コンソールにputsのあとの値を出力せよ」という命令で、コンピュータがそれを実行します。
	なお、putsの後には「半角スペース」をあける必要があります。
	<br><%= image_tag '/assets/出力の命令1.png' %><%= image_tag '/assets/出力の命令2.png' %><br>
	行の先頭に「#」を書くと、その行がコメントになります。コメントにすると、その行は実行されません。
	「#」も必ず半角で記述し、正しくコメントできている場合は灰色になります。
	コメントは、プログラミングに関するメモを残したりするのに便利です。
	<br><%= image_tag '/assets/コメントの書き方1.png' %><%= image_tag '/assets/コメントの書き方2.png' %><br>
	[index.rb]<br>
	# ①「こんにちは、Ruby」と出力してください<br>
	puts "こんにちは、Ruby"<br>
	# ②以下の行をコメントにしてください<br>
	#puts "Hello Ruby"<br>
</div>

<div style="padding: 100px 0 100px 0;">
	プログラミングでは、数値を扱うこともできます。数値は文字列と違いクォーテーションで囲みません。
	数値は足し算や引き算といった計算が可能です。足し算には「+」、引き算には「-」の記号を用います。
	数値と記号はすべて半角で記述します。
	<br><%= image_tag '/assets/ruby数値1.png' %><%= image_tag '/assets/ruby数値2.png' %><br>
	プログラミングの世界では「文字列と数値は別物」です。例えば文字列の"3"と数値の3をコンピュータは別物として扱います。
	下図のように、5 + 2は7になりますが、"5 + 2"は文字列と認識されるので、そのまま「5 + 2」と出力されています。
	<br><%= image_tag '/assets/文字列と数値の違い1.png' %><%= image_tag '/assets/文字列と数値の違い2.png' %><br>
	[index.rb]<br>
	# ①数値の37を出力してください<br>
	puts 37<br>
	# ②「+」を用いて、2に9を足した値を出力してください<br>
	puts 2 + 9<br>
	# ③文字列「2 + 9」を出力してください<br>
	puts "2 + 9"<br>
</div>

<div style="padding: 100px 0 100px 0;">
	足し算・引き算以外の計算も可能です。
	掛け算は「*」(アスタリスク)、割り算は「/」(スラッシュ)という記号を用います。また「%」を用いると、割り算の余りを計算できます。この3つの記号は数学で用いるものと少し違いますので、しっかり覚えましょう。
	<br><%= image_tag '/assets/掛け算・割り算・余りの計算1.png' %><%= image_tag '/assets/掛け算・割り算・余りの計算2.png' %><br>
	[index.rb]<br>
	# ①「*」を用いて、13に9を掛けた値を出力してください<br>
	puts 13 * 9<br>
	# ②「/」を用いて、32を8で割った値を出力してください<br>
	puts 32 / 8<br>
	# ③「%」を用いて、18を5で割った余りを出力してください<br>
	puts 18 % 5<br>
</div>

<div style="padding: 100px 0 100px 0;">
	文字列同士に「+」記号を用いると、文字列同士を連結することができます。左の図のように、"にんじゃ" + "わんこ"とすると、「にんじゃわんこ」という1つの文字列になります。
	<br><%= image_tag '/assets/文字列の連結1.png' %><%= image_tag '/assets/文字列の連結2.png' %><br>
	ここでも文字列と数値の違いがわかります。
	"3" + "5"は"35"という文字列になりますが、3 + 5は8になります。
	「文字列と数値は別物」ということをしっかり意識しましょう。
	<br><%= image_tag '/assets/文字列と数値の違い（２）1.png' %><%= image_tag '/assets/文字列と数値の違い（２）2.png' %><br>
	[index.rb]<br>
	# ①「私は」と「にんじゃわんこです」を連結して出力してください<br>
	puts "私は" + "にんじゃわんこです"<br>
	# ②文字列の「38」と「19」を連結して出力してください<br>
	puts "38" + "19"<br>
</div>

<div style="padding: 100px 0 100px 0;">
	ここからは変数について学習します。
	変数とは、値を入れておく箱のようなものです。
	下図が変数のイメージ図です。
	変数はコードを書きやすくする便利なもので、プログラミングでは必須の知識です。詳しくは次から学んでいきましょう。
	<br><%= image_tag '/assets/変数とは.png' %><br>
	変数を使うには、まず変数を定義する必要があります。
	変数は下図のように「変数名 = 値」で定義します。
	「=」は「等しい」という意味ではありません。プログラミングの「=」は「左の変数に右の値を入れる」という意味で、これを代入といいます。
	<br><%= image_tag '/assets/変数の定義1.png' %><%= image_tag '/assets/変数の定義2.png' %><br>
	変数の使い方は簡単です。左の図のように「John」という値が代入された変数nameを出力すると、右の図のように「John」という値が出力されます。
	中央のイメージ図で示されているように、変数を使うと変数の部分は代入した値に置き換わります。
	<br><%= image_tag '/assets/変数の使い方1.png' %><%= image_tag '/assets/変数の使い方2.png' %><%= image_tag '/assets/変数の使い方3.png' %><br>
	左の図のように、変数を使う時に誤って変数をクォーテーションで囲まないようにしましょう。クォーテーションで囲んでしまうと、変数ではなく単なる文字列として扱われてしまいます。
	<br><%= image_tag '/assets/変数を使う時の注意点1.png' %><%= image_tag '/assets/変数を使う時の注意点2.png' %><br>
	[index.rb]<br>
	# ①変数nameに、文字列「にんじゃわんこ」を代入してください<br>
	name = "にんじゃわんこ"<br>
	# ②変数nameを出力してください<br>
	puts name<br>
</div>

<div style="padding: 100px 0 100px 0;">
	変数を使うのは、必ず変数を定義（変数名 = 値）した後でなければ出来ません。
	これは下図のようにプログラムが上から順に実行されるためです。
	<br><%= image_tag '/assets/変数を使える場所.png' %><br>
	変数を呼び出すと代入した値に「置き換わる」ので、文字列が入った変数は文字列とまったく同じように扱うことができます。
	例えば文字列の連結であれば、文字列の入った変数と文字列の連結も、変数同士の連結も可能です。
	<br><%= image_tag '/assets/文字列の入った変数1.png' %><%= image_tag '/assets/文字列の入った変数2.png' %><br>
	同様に、数値が入った変数なら、数値と同じように扱うことができます。
	変数と数値の計算も、変数同士の計算も可能です。
	<br><%= image_tag '/assets/数値の入った変数1.png' %><%= image_tag '/assets/数値の入った変数2.png' %><br>
	[index.rb]<br>
	text = "プログラミングを学ぼう"<br>
	# ①文字列「Progateで」と変数textを連結して、出力してください<br>
	puts "Progateで" + text<br>
	# ②変数lengthと変数widthを掛けて出力してください<br>
	length = 8<br>
	width = 9<br>
	puts length * width<br>
</div>

<div style="padding: 100px 0 100px 0;">
	なぜ変数を使うのでしょうか？
	実際のプログラムの中には多くの値が登場します。プログラムを書く時は、それらの値を間違いのないように、そして値の変更に対応しやすいようにすることが求められます。それを助けるための1つの仕組みが変数です。
	変数には以下のようなメリットがあります。
	<br><%= image_tag '/assets/なぜ変数を使うのか.png' %><br>
	「同じ値を繰り返し使える」「変更に対応しやすい」という具体例を見てみましょう。
	左の図のように、似た文章を何度も書くのは面倒ですが変数を使えば同じ値を繰り返し使えて、楽にコードを書くことが出来ます。
	また文章が後ほど変更されても、変数を用いていれば、代入する値を変更するだけですべての変更に対応できます。
	<br><%= image_tag '/assets/数値の入った変数1.png' %><%= image_tag '/assets/数値の入った変数2.png' %><br>
	変数には、何の値が代入されているかわかりやすい変数名をつけましょう。
	name="にんじゃわんこ"の例を見ると、「にんじゃわんこ」というただの文字列が「名前」を表している、ということが変数名から想像できます。
	値にふさわしくない変数名をつけてしまうと、その値が何の値かわからなくなることもあるので気をつけましょう。
	<br><%= image_tag '/assets/わかりやすい変数名.png' %><br>
	変数名は自由に決めることができますが、Rubyではいくつか命名のルールがあります。
	特に、2語以上を組み合わせた変数名をつけるときは、アンダーバー（_）を用いるということは覚えておきましょう。
	<br><%= image_tag '/assets/ruby変数名のルール1.png' %><%= image_tag '/assets/ruby変数名のルール2.png' %><br>
	[index.rb]<br>
	# 現在、「HTML」「CSS」「Ruby」という文字列が出力されていますが、下記の3つの文章を出力するように変更します。・HTMLをマスターしよう・CSSをマスターしよう・Rubyをマスターしよう<br>
	# ①変数textに「をマスターしよう」を代入してください<br>
	text = "をマスターしよう"<br>
	# ②下記の文字列に変数textを連結してください<br>
	puts "HTML" + text<br>
	puts "CSS" + text<br>
	puts "Ruby" + text<br>
</div>

<div style="padding: 100px 0 100px 0;">
	変数は、一度代入した値を変更することもできます。
	一度値を代入した変数に、その後再び値を代入すると、後に代入した値で変数の中身が上書きされます。
	<br><%= image_tag '/assets/変数の値を変更する1.png' %><%= image_tag '/assets/変数の値を変更する2.png' %><%= image_tag '/assets/変数の値を変更する3.png' %><br>
	変数更新
	下図の変数の更新のイメージを見て、後で代入された値で変数の中身が更新されることを意識しておきましょう。
	プログラムが上から順に実行されることを思い出せば、特別難しくはありません。
	<br><%= image_tag '/assets/更新のイメージ.png' %><br>
	[index.rb]<br>
	length = 9<br>
	width = 8<br>
	puts width<br>
	puts length * width<br>
	puts "----"<br>
	#変数length、変数widthが用意されており、・width・length * widthの2つの値が出力されています。変数widthの定義後に、widthの値を変更してみましょう。<br>
	# ①変数widthの値を13に変更してください<br>
	width = 13<br>
	puts width<br>
	puts length * width<br>
</div>

<div style="padding: 100px 0 100px 0;">
	すでに定義している変数numberの値に3を足したい、というときどのようにすればよいでしょうか。
	これは下図のようにnumberに3を足して、再びnumberに代入することで実現できます。「=」の右側のnumberは値に置き換わり、計算された結果が、左のnumberに代入されています。
	<br><%= image_tag '/assets/自分自身に代入する1.png' %><%= image_tag '/assets/自分自身に代入する2.png' %><br>
	自分自身に代入する変数の更新も、イメージ図で確認しておきましょう。
	<br><%= image_tag '/assets/変数更新のイメージ.png' %><br>
	「number = number + 3」といった書き方には、省略した書き方もあります。
	よく使いますので、下図をぜひ覚えましょう。
	<br><%= image_tag '/assets/省略した書き方.png' %><br>
	[index.rb]<br>
	length = 9<br>
	width = 8<br>
	puts width<br>
	puts length * width<br>
	puts "----"<br>
	# 変数widthの定義後に、widthの値を変更してみましょう。<br>
	# ①widthの値に5を足して、widthの値を変更してください<br>
	width += 5    #width = width + 5の省略系<br>
	puts width<br>
	puts length * width<br>
</div>

<div style="padding: 100px 0 100px 0;">
	変数の値を文字列の中に含める方法があります。
	下図のように文字列の中で、#{変数名}とすることで、変数を代入している値に置き換えて、文字列に含めることができます。
	これを「変数展開」と呼びます。
	<br><%= image_tag '/assets/変数を文字列に含める1.png' %><%= image_tag '/assets/変数を文字列に含める2.png' %><br>
	変数展開をする際は注意点があります。
	実はダブルクォーテーションを使った文字列の場合しか変数展開はされません。シングルクォーテーションの場合は、変数展開が行われず、そのまま文字列として出力されてしまうので注意しましょう。
	<br><%= image_tag '/assets/変数展開の注意点1.png' %><%= image_tag '/assets/変数展開の注意点2.png' %><br>
	変数展開は文字列の連結と役割としては同じですが、1つ異なる点があります。
	実は左の図のように、数値と文字列を足し算で連結することはできません。
	しかし右の図のように変数展開を用いると、数値の入った変数も問題なく文字列に含めることが可能です。
	変数を文字列に含める場合は、基本的に変数展開を使うようにしましょう。
	<br><%= image_tag '/assets/変数展開のメリット1.png' %><%= image_tag '/assets/変数展開のメリット2.png' %><br>
	[index.rb]<br>
	length = 9<br>
	width = 8<br>
	area = length * width<br>
	# 四角形の面積が、「見本」のようにわかりやすくコンソールに出力されるようにしてあげましょう。求められた面積は、変数areaに代入されています。<br>
	# ①「面積は◯◯です」となるように出力してください<br>
	puts "面積は#{area}です"		#囲む時は""(ダブルクォーテーション)で、#{変数名}でかく<br>
</div>

<div style="padding: 100px 0 100px 0;">
	プログラミングを学んでいると「ある条件が成り立つときだけある処理を行う」という場面が出てきます。このようなプログラムを条件分岐と言います。例えば日常生活のなかでは「点数がよかったら、褒める」という条件分岐を行ったりしています。
	<br><%= image_tag '/assets/ruby条件分岐.png' %><br>
	if文を用いると「もし○○ならば●●を行う」という条件分岐が可能になります。ifの後ろに条件式を書き、それが「成り立つ」場合、処理を実行します。また、処理はifとendで囲みます。
	下図でif文の書き方のイメージを掴みましょう。
	<br><%= image_tag '/assets/if文の書き方1.png' %><%= image_tag '/assets/if文の書き方2.png' %><br>
	実際のコードで見てみましょう。
	まず左の図は条件式の一例です。「score > 80」の部分は「変数scoreの値が80より大きい」という条件になります。
	変数scoreにはいま94が代入されているので、この条件は成り立ち、処理が実行されています。
	<br><%= image_tag '/assets/rubyif文のコード1.png' %><%= image_tag '/assets/rubyif文のコード2.png' %><br>
	if文の条件式が成り立たなければ処理は実行されません。
	下図で、条件が成り立たない場合も見ておきましょう。
	<br><%= image_tag '/assets/条件が成り立たないとき1.png' %><%= image_tag '/assets/条件が成り立たないとき2.png' %><br>
	[index.rb]<br>
	# ③scoreは45なので、コンソールには何も出力されないはずです。条件式が成り立つように、scoreに代入する値を数値の92に書き換えてください。<br>
	score = 92<br>
	# ①変数scoreが用意されています。if文を自分で記述してみましょう。<br>
	# ②条件式を「score > 80」とするif文をつくってください<br>
	if score > 80<br>
	    puts "よくできました"<br>
	  else<br>
	    puts "まだまだだね"<br>
	end<br>
</div>

<div style="padding: 100px 0 100px 0;">
	if文を使うことができました。次は条件式の部分を詳しく見てみましょう。右の図のように、先ほどのif文の条件式の部分を出力してみると、「true」が出力されています。このtrueとは一体なんでしょうか？
	<br><%= image_tag '/assets/条件式の出力1.png' %><%= image_tag '/assets/条件式の出力2.png' %><br>
	先ほどの例で出力された「true」は真偽値と呼ばれるものです。
	真偽値にはtrueとfalseという2つの値しか存在しません。
	条件式は、成り立つと「true」、成り立たなければ「false」という真偽値に置き換わります。よって下図のように条件式をputsしてみると、trueやfalseが出力されています。
	<br><%= image_tag '/assets/ruby真偽値1.png' %><%= image_tag '/assets/ruby真偽値2.png' %><br>
	先ほど条件式の部分は、trueかfalseに置き換わることを学びました。
	このことからif文は、条件式がtrueであれば処理が実行され、falseであれば実行されないということがわかります。
	if文の条件式がtrueの場合を、下図で見ておきましょう。
	<br><%= image_tag '/assets/if文と真偽値1.png' %><%= image_tag '/assets/if文と真偽値2.png' %><%= image_tag '/assets/if文と真偽値3.png' %><br>
	if文の条件式がfalseの場合の具体例は下図のようになります。
	<br><%= image_tag '/assets/条件式がfalseのとき1.png' %><%= image_tag '/assets/条件式がfalseのとき2.png' %><%= image_tag '/assets/条件式がfalseのとき3.png' %><br>
	条件式に使った「>」は比較演算子と呼ばれる、大小比較の記号です。
	「a < b」は、aの方がbより小さいときtrue, 大きいときfalseになります。
	また「a <= b」とすると、aの方がbより小さいまたは等しい（つまりb以下）のときtrueになります。これは数学で用いる「≦」という記号と似ています。
	<br><%= image_tag '/assets/ruby大小比較1.png' %><%= image_tag '/assets/ruby大小比較2.png' %><%= image_tag '/assets/ruby大小比較3.png' %><br>
	[index.rb]<br>
	score = 80<br>
	# 変数scoreが用意されています。まずは、比較演算子で比較した結果を出力してみましょう。<br>
	# ①「score > 80」を出力してください<br>
	puts score > 80<br>
	# ②「score <= 80」を出力してください<br>
	puts score <= 80<br>
	# いまscoreの値は80なので、「score > 80」はfalse、「score <= 80」はtrueに置き換わっているはずです。次は自分でif文を作ってみましょう。<br>
	# ③scoreの値が80以下の場合に、「がんばりましょう」と出力してください<br>
	if score <= 80<br>
	  puts "がんばりましょう"<br>
	end<br>
</div>

<div style="padding: 100px 0 100px 0;">
	比較演算子には、左と右の値が等しいかを調べるものもあります。
	「a == b」はaとbが等しければtrue、等しくなければfalseになります。
	「a != b」はその逆です。
	この記号は数値だけでなく、文字列同士の比較にも使えます。
	<br><%= image_tag '/assets/ruby比較演算子（２）1.png' %><%= image_tag '/assets/ruby比較演算子（２）2.png' %><%= image_tag '/assets/ruby比較演算子（２）3.png' %><br>
	[index.rb]<br>
	score = 100<br>
	# ①scoreの値が100の場合、「満点です」と出力してください<br>
	if score == 100<br>
	    puts "満点です"<br>
	  #else<br>
	    #puts "満点ではありません"<br>
	end<br>
	# ②scoreの値が100でない場合、「満点ではありません」と出力してください<br>
	if score != 100<br>
	  puts "満点ではありません"<br>
	end<br>
</div>

<div style="padding: 100px 0 100px 0;">
	if文の条件式が成り立たない場合に、別の処理を行いたい場合があります。例えば下図のように、点数がよくなかったら「がんばりましょう」と声をかけるための方法を学びます。
	<br><%= image_tag '/assets/ruby条件が成り立たない場合の処理1.png' %><%= image_tag '/assets/ruby条件が成り立たない場合の処理2.png' %><br>
	ifにelseを組み合わせると「もし〇〇なら●●を行う、そうでなければ■■を行う」という処理ができるようになります。
	if文の条件がfalseの場合、elseの処理が実行されます。
	<br><%= image_tag '/assets/elseの書き方.png' %><br>
	elseを使った実際のコードを見てみましょう。
	左の図は、先ほどの演習で書いたコードです。elseを使わない場合はこのように2つif文をつくる必要があります。
	elseを使うと、右の図のように1つの条件分岐で同じことを実現できます。
	<br><%= image_tag '/assets/elseのコード1.png' %><%= image_tag '/assets/elseのコード2.png' %><br>
	インデントとは日本語で「字下げ」を意味します。きれいにインデントするとコードがみやすくなります。
	下図をみてみましょう。インデントを入れることでifの処理とelseの処理がどこまでか一目でわかります。
	tabキーを1回押すと、半角スペース2つ分インデントできます。
	<br><%= image_tag '/assets/rubyインデント1.png' %><%= image_tag '/assets/rubyインデント2.png' %><br>
	[index.rb]<br>
	score = 60<br>
	# scoreが80より大きい場合に、「よくできました」と出力されるif文が用意されています。コンソールの▶を押してみましょう。いまscoreの値は60なので何も出力されません。<br>
	# ①条件式が成り立たない場合に「がんばりましょう」と出力されるように書き換えてください<br>
	if score > 80<br>
	  puts "よくできました"<br>
	else<br>
	  puts "がんばりましょう"<br>
	end<br>
</div>

<div style="padding: 100px 0 100px 0;">
	ifとelseだけでなく、さらに条件を追加したい場合の方法を学びます。
	例えば下図でいえば、「まずまずです」と声を掛けるためには、さらに条件を加える必要があります。
	<br><%= image_tag '/assets/条件を追加する1.png' %><%= image_tag '/assets/条件を追加する2.png' %><%= image_tag '/assets/条件を追加する3.png' %><br>
	elsifを用いると「もし◯◯だったら●●を行う、そうでなくもし△△であれば▲▲を行う、いずれでもなければ■■を行う」という条件分岐ができます。
	elsifをelseifと書かないように注意しましょう。
	<br><%= image_tag '/assets/elsifの書き方.png' %><br>
	elsifを使った実際のコードを見てみましょう。
	<br><%= image_tag '/assets/elsifのコード1.png' %><%= image_tag '/assets/elsifのコード2.png' %><br>
	elsifは必要な数だけ並べることができますが、複数の条件に合致したとしても、実行されるのは最初に合致した条件の処理のみです。そのため条件の順番を間違えると、期待した分岐がなされないことがあります。
	例えば、左の図は「score > 60」の条件を最初に書いていることで、scoreが98にも関わらず「まずまずです」と出力されてしまう失敗例です。
	<br><%= image_tag '/assets/elsifの注意点1.png' %><%= image_tag '/assets/elsifの注意点2.png' %><br>
	[index.rb]<br>
	score = 73<br>
	# 下記のような条件分岐を行います。<br>
	#① scoreが80より大きければ、「よくできました」と出力<br>
	#② scoreが60より大きければ、「まずまずです」と出力<br>
	#③ ①も②も成り立たない場合は、「がんばりましょう」と出力すでにifとelseは用意されています。<br>
	# ④scoreの値が60より大きい場合に「まずまずです」と出力されるように書き換えてください<br>
	if score > 80<br>
	  puts "よくできました"<br>
	elsif score > 60<br>
	  puts "まずまずです"<br>
	else<br>
	  puts "がんばりましょう"<br>
	end<br>
</div>

<div style="padding: 100px 0 100px 0;">
	複数の条件を組み合わせる方法を学びます。まずは「かつ」についてです。
	「かつ」は「&&」で表します。「条件1 && 条件2」は「条件1かつ条件2」という意味で、複数の条件がすべてtrueならtrueになります。
	右の図の「10より大きいかつ30より小さい」というのは「10 < x < 30」と数学のように書くことは出来ません。このようなときは「&&」を使いましょう。
	<br><%= image_tag '/assets/rubyかつ1.png' %><%= image_tag '/assets/rubyかつ2.png' %><br>
	次は「または」を表す記号です。
	「または」は「||」で表します。「条件1 || 条件2」は「条件1または条件2」という意味です。この場合は、複数の条件のうち1つでもtrueならtrueになります。
	<br><%= image_tag '/assets/rubyまたは1.png' %><%= image_tag '/assets/rubyまたは2.png' %><br>
	変数scoreを使った「かつ」の具体例を見てみましょう。
	左の図では、「score <= 80」も「score > 60」もともにtrueなので、処理が実行されています。
	<br><%= image_tag '/assets/組み合わせの具体例1.png' %><%= image_tag '/assets/組み合わせの具体例2.png' %><br>
	[index.rb]<br>
	score = 96<br>
	# ①「95以上かつ99以下」の場合のif文を作ってください<br>
	# ②「&&」を用いて、scoreの値が「95以上かつ99以下」の場合、高得点です！次は満点を目指しましょう。と出力してください。<br>
	if score >= 95 && score <= 99<br>
	  puts "高得点です！次は満点を目指しましょう。"<br>
	end<br>
</div>

<div style="padding: 100px 0 100px 0;">
	下図のように、変数numberに対して
	・3の倍数かつ5の倍数（= 15の倍数）
	・5の倍数
	・3の倍数
	・いずれでもない
	を判定するプログラムを作りましょう。
	<br><%= image_tag '/assets/総合課題にチャレンジしよう！1.png' %><%= image_tag '/assets/総合課題にチャレンジしよう！2.png' %><br>
	[index.rb]<br>
	number = 48<br>
	# 条件分岐を作成してください<br>
	# 条件分岐の総合課題に取り組みましょう。  ある整数が  ・3の倍数かつ5の倍数（= 15の倍数）  ・5の倍数  ・3の倍数  <br>・いずれでもないを判定するプログラムを作ります。コードの量が多いですが、クリアを目指してがんばりましょう！<br>
<br>
	if number % 3 == 0 && number % 5 == 0  #「number%3 == 0 && number%5 == 0」がありません<br>
	  puts "15の倍数です"<br>
	elsif number % 5 == 0<br>
	  puts "5の倍数です"<br>
	elsif number % 3 == 0<br>
	  puts "3の倍数です"<br>
	else<br>
	  puts "3の倍数でも5の倍数でもありません"<br>
	end<br>
</div>

<div style="padding: 100px 0 100px 0;">
next→<%= link_to 'Ruby_part2', ruby_part2_path %><br>
Home→<%= link_to 'Home', root_path %>
</div>
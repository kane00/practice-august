<div style="padding: 20px 0 20px 0;">
	Home→<%= link_to 'Home', root_path %>
	first→<%= link_to 'Paiza/C#コース1', csharp_path %>
	prev→<%= link_to 'Paiza/C#コース3', csharp_part3_path %>
</div>

<h1>Paiza C#コース4  C#入門編4: 配列の基礎</h1>

<div style="padding: 100px 0 100px 0;">
	<video src="assets/videos/配列とは何かを学ぼう.mp4" controls preload muted></video><br>
	＃01:配列とは何かを学ぼう
	ここでは、プログラミング言語 C# を使って、規模が大きなプログラムを作るときに必要になる配列にについて、基本的な考え方を学習しましょう。
	①配列の使いどころ
	・並び順管理が必要なデータ処理
	・エクセルのような複数業のデータ処理
	・フォーム等の選択肢の管理（性別、都道府県、etc）
	・座席の空席管理
	・CSVデータの処理（二次元配列、連想配列）
	・将棋のような盤面の表現（二次元配列）
</div>

<div style="padding: 100px 0 100px 0;">
	<video src="assets/videos/配列を作ろう.mp4" controls preload muted></video><br>
	＃02:配列を作ろう 
	ここでは、配列の基本操作について学びます。そして、C# (シーシャープ)を使って、配列の作成、表示、代入といった機能を試してみましょう。
	①配列の作成
	string[] team = {"戦士", "忍者", player_2};
	②このチャプターで使用したメソッド
	- String.join データを連結します。
	https://msdn.microsoft.com/ja-jp/library/57a79xd0.aspx
	③参考になるWebページ
	- 【C#】表示メソッドについて
	https://msdn.microsoft.com/ja-jp/library/system.console.aspx
	// 配列を作ろう
	using System;
	public class Hello{
	    public static void Main(){
	        var player_1 = "勇者";
	        var player_2 = "魔法使い";
	        Console.WriteLine(player_1);
	        Console.WriteLine(player_2);
	        string[] team = {"戦士", "忍者", player_2};       //配列の要素、[]は必ず、要素は{}で囲む、同じ型しかできない
	        Console.WriteLine(string.Join("・",team));  //配列をまとめて出力
	        Console.WriteLine(team[0]);
	        Console.WriteLine(team[1]);
	        Console.WriteLine(team[2]);             //player_2も加えられる
	    }
	}
	[演習]
	①演習課題「配列の中身を出力してみよう」
	右のコードには、配列が定義されています。	この配列の要素をWriteLineメソッドを使って順に表示してみてください。
	// 配列の中身を出力してみよう
	using System;
	public class Program{
	    public static void Main(){
	        string[] array = {"戦士","侍","僧侶","魔法使い"};
	        // この下で、arrayの要素を表示しよう
	        for (var i = 0; i < 4; i++) {
	            Console.WriteLine(array[i]);		//繰り返す所をfor文で代用
	        }
	    }
	}
	②演習課題「指定の文字を配列にしてみよう」
	item という配列に、下記の要素をこの並び順で代入して、WriteLineメソッドで要素を順に出力をしてください。
	「ロングソード」「ブレードソード」「エクスカリバー」
	// 指定の文字を配列にする
	using System;
	public class Program{
	    public static void Main(){
	        string[] item = {"ロングソード", "ブレードソード", "エクスカリバー"};
	        Console.WriteLine(item[0]);
	        Console.WriteLine(item[1]);
	        Console.WriteLine(item[2]);
	    }
	}
	③ 演習課題「変数で、配列に代入しよう」
	右のコードには、player_1, player_2, player_3という変数に、文字列が代入されています。
	このplayer_1, player_2, player_3を、この順番で配列に代入して、WriteLineメソッドで要素を順に表示してください。
	// 変数で、配列に代入する
	using System;
	public class Program{
	    public static void Main(){
	        string player_1 = "勇者";
	        string player_2 = "魔法使い";
	        string player_3 = "戦士";
	        // player_1, player_2, player_3を、配列に代入して、WriteLineメソッドで表示してください。
	        string[] hunter = {player_1, player_2, player_3};
	        for (var i = 0; i < 3; i++) {
	            Console.WriteLine(hunter[i]);
	        }
	    }
	}
</div>

<div style="padding: 100px 0 100px 0;">
	<video src="assets/videos/配列の要素を取り出してみよう.mp4" controls preload muted></video><br>
	＃03:配列の要素を取り出してみよう 
	ここでは、配列の要素をいろいろな方法で取り出してみます。配列では、インデックスを使って要素を取り出します。
	また、そのインデックスは変数で指定したり、計算して指定できます。
	①このチャプターで使用したメソッド
	配列の参照　要素の番号を指定する
	・　team[0] 直接数値で指定する
	・　team[n] 変数で指定する
	・　s[n + 1] 計算式で指定する
	②参考になるWebページ
	配列 (C# プログラミング ガイド)
	https://msdn.microsoft.com/ja-jp/library/9b9dty7d.aspx
	配列 - C# 入門
	http://ufcpp.net/study/csharp/st_array.html

	// 配列を要素を取り出してみよう
	using System;
	public class Program{
	    public static void Main(){
	        string[] team = {"勇者", "魔法使い"};
	        Console.WriteLine(string.Join("・", team));     //デバックでも使うJoin
	        team = new string[2];       //新しくteamを上書き
	        team[0] = "戦士";
	        team[1] = "忍者";
	        var number = 0;
	        Console.WriteLine(team[number + 10]);        //計算でもOK、データ型のみ気をつけること
	        //C#ではindexの範囲外は表示できないようになっている
	    }
	}
	[演習]
	①演習課題「配列から最初の要素を取り出してみよう」
	右のコードエリアには、5つの要素を持つ配列が定義されています。この配列の最初の要素(インデックスが0の要素)をWriteLineメソッドで出力してください。
	// 配列から特定要素を取り出す
	using System;
	public class Program{
	    public static void Main(){
	        string[] team = {"勇者", "戦士", "侍", "忍者", "魔法使い"};
	        // teamの1番左の要素をWriteLineメソッドで出力する
	        Console.WriteLine(team[0]);

	    }
	}
	②演習課題「配列から特定要素を取り出してみよう」
	右のコードエリアには、5つの要素を持つ配列が定義されています。この配列のインデックスが2の要素をWriteLineメソッドで出力してください。
	// 配列から特定要素を取り出す
	using System;
	public class Program{
	    public static void Main(){
	        string[] team = {"勇者", "戦士", "侍", "忍者", "魔法使い"};
	        // teamのインデックス 2の要素をWriteLineメソッドで出力する
	        Console.WriteLine(team[2 + 0]);			//計算式OK
	    }
	}
</div>

<div style="padding: 100px 0 100px 0;">
	<video src="assets/videos/ループで配列を処理しよう.mp4" controls preload muted></video><br>
	＃04:ループで配列を処理しよう
	ここでは、ループ処理で配列を扱ってみたいと思います。
	そのために、C#（シーシャープ）のfor（フォー）文と配列を組み合わせて、HTMLのプルダウンリストを作成します。
	①ループで配列を扱う
	string[] team = {"勇者", "戦士","魔法使い", "盗賊"};
	for(var i=0; i<4; i++){
	    Console.WriteLine(team[i]);
	}
	②配列の長さの取得
	配列名.Length
	③文字列の結合
	string a = "aaa"
	string b = "bbb"
	Console.WriteLine(a+b+"です")
	//aaabbbです
	paizaラーニング - C#入門01 ＃09：データの型を覚えよう
	https://paiza.jp/works/cs/primer/beginner-cs1/13008
	④参考になるWebページ
	前回と同様、省略

	// 配列の要素を取り出してみよう
	using System;
	public class Program{
	    public static void Main(){
	        string[] team = {"勇者", "戦士", "魔法使い", "盗賊"};
	        // Console.WriteLine(team[0]);
	        // Console.WriteLine(team[1]);
	        // Console.WriteLine(team[2]);
	        Console.WriteLine("<select name='job'>");       //selectがプルダウン式
	        for (var i = 0; i < team.Length; i++) {       //「配列名.Length」は配列の長さを習得
	            Console.WriteLine("<option>" + team[i] + "</option>");      //optionがプルダウンの中身
	        }
	        Console.WriteLine("</select>");
	    }
	}
	[演習]
	①演習課題「配列の中身を1行ずつ表示してみよう」
	右のコードエリアには、RPGの敵が、enemy配列で定義されています。	この配列から要素を順に取り出して、「＊＊が現れた」と出力してください。
	// 配列の中身をループで表示する
	using System;
	public class Program{
	    public static void Main(){
	        string[] enemy = {"スライム", "モンスター", "ゾンビ", "ドラゴン", "魔王"};
	        // ここに、要素をループで表示するコードを記述する
	        for (var i=0; i < enemy.Length; i++) {
	            Console.WriteLine(enemy[i] + "が現れた");
	        }
	    }
	}
	②演習課題「要素を合計を計算してみよう」
	右のコードエリアでは、numbers配列に数値が格納されています。この全要素の合計値を計算して出力してください。
	// 要素を合計を計算する
	using System;
	public class Program{
	    public static void Main(){
	        int[] numbers = {12, 34, 56, 78, 90};
	        int sum = 0;
	        for (int i = 0; i < numbers.Length; i++) {
	            // ここに、合計を計算するコードを記述する
	            sum += numbers[i];      //+=でsumにプラスしていく
	        }
	        Console.WriteLine(sum);
	    }
	}
</div>

<div style="padding: 100px 0 100px 0;">
	<video src="assets/videos/ループで配列を処理しよう その2.mp4" controls preload muted></video><br>
	＃05:ループで配列を処理しよう その2 
	引き続き、ループ処理の配列処理を扱っていきます。今回はforeach文を使います。
	①配列の長さの取得
	配列名.Length
	②foreachループで配列を扱う
	 string[] team = {"勇者", "戦士", "魔法使い"};
	 foreach (string job in team){
	     Console.WriteLine( job );
	 }
	 ③参考になるWebページ
	- foreach - C#によるプログラミング入門- MSDN - Microsoft
	http://ufcpp.net/study/csharp/sp_foreach.html
	- foreach,in(C#リファレンス) - MSDN - Microsoft
	https://msdn.microsoft.com/ja-jp/library/ttw7t8t6.aspx

	using System;
	using System.Collections;
	public class Hello{
	    public static void Main(){
	        string [] team = {"勇者", "戦士", "魔法使い"};
	        // Console.WriteLine(team.Length);
	        // for (int i = 0; i < team.Length; i++ ) {
	        //     Console.WriteLine(team[i]);
	        // }   
	        foreach(string job in team){        //jobはループ内で使う変数、取り出したい変数をinの後に
	            Console.WriteLine(job);         //全ての要素に処理を行うループ文
	        }
	    }
	}
	[演習]
	①演習課題「配列の中身を1行ずつ表示してみよう」
	右のコードエリアには、RPGの敵が、enemy配列で定義されています。foreachで、この配列から要素を順に取り出して、「＊＊が現れた」と出力してください。
	// 配列の中身をループで表示する
		using System;
		public class Program{
		    public static void Main(){
		        string[] enemy = {"スライム", "モンスター", "ゾンビ", "ドラゴン", "魔王"};
		        // ここに、要素をループで表示するコードを記述する
		        foreach (string i in enemy) {       //stringの後ろはなんでもいい
		            Console.WriteLine(i + "が現れた");
		        }
		    }
		}
	②演習課題「要素を合計を計算してみよう」
	右のコードエリアでは、numbers配列に数値が格納されています。foreachで、この全要素の合計値を計算して出力してください。
	// 要素を合計を計算する
	using System;
	public class Program{
	    public static void Main(){
	        int[] numbers = {12, 34, 56, 78, 90};
	        int sum = 0;
	        foreach (int i in numbers){
	            // ここに、合計を計算するコードを記述する
	            sum += i;       //iにするだけでnumbers[i]を記入せずよくなる
	        }
	        Console.WriteLine(sum);
	    }
	}
</div>

<div style="padding: 100px 0 100px 0;">
	<video src="assets/videos/Listクラスを使おう.mp4" controls preload muted></video><br>
	＃06:Listクラスを使おう 
	ここでは、作った配列をListの構文に変換し、その後、要素の追加を行っていきます。
	①Listクラスの使用
	using System.Collections.Generic;
	var team = new List<　string　>();
	team.Add("勇者");
	team.Add("戦士");
	team.Add("魔法使い");
	foreach(string str in team){
	    Console.WriteLine(str);
	}
	②このチャプターで使用したメソッド
	- ArrayList.Add メソッド (Object) (System.Collections)- MSDN - Microsoft
	https://msdn.microsoft.com/ja-jp/library/system.collections.arraylist.add(v=vs.110).aspx
	- ArrayList.Insert メソッド (Int32, Object) (System.Collections)- MSDN - Microsoft
	https://msdn.microsoft.com/ja-jp/library/system.collections.arraylist.insert(v=vs.110).aspx
	- ArrayList.Remove メソッド (Object) (System.Collections)- MSDN - Microsoft
	https://msdn.microsoft.com/ja-jp/library/system.collections.arraylist.remove(v=vs.110).aspx
	③参考になるWebページ
	- ArrayList クラス (System.Collections)
	https://msdn.microsoft.com/ja-jp/library/system.collections.arraylist(v=vs.110).aspx

	//Listクラスを使おう
	using System;
	using System.Collections.Generic;     	 	//Listを使うための準備
	public class Program{
	    public static void Main(){
	        var team = new List< string >();
	        team.Add("勇者");                  	 //Addメソッドで追加していく
	        // Console.WriteLine(team.Count);	 //要素が追加されるたびに数が増えているか確認
	        team.Add("戦士");
	        // Console.WriteLine(team.Count);
	        team.Add("魔法使い");
	        // Console.WriteLine(team.Count);
	        team.Insert(1,"忍者"); 	    	    //Insertで要素を追加できる
	        team.Remove("戦士");    		        //Removeで要素を削除できる
	        foreach(string str in team) {
	            Console.WriteLine(str);
	        }
	    }
	}
	[演習]
	①演習課題「Listに要素を追加してみよう」
	右のコードエリアには、weaponというListが定義されています。このListに「木の棒」「鉄の剣」「石斧」という要素を追加してください。
	// Listに要素を追加する
	using System;
	using System.Collections.Generic;
	public class Hello{
	    public static void Main(){
	        var weapon = new List<　string　>();
	        // ここに、要素を追加するコードを記述する
	            weapon.Add("木の棒");
	            weapon.Add("鉄の剣");
	            weapon.Add("石斧");
	        foreach (string item in weapon){
	            Console.WriteLine(item);
	        }
	    }
	}
	②演習課題「Listから要素を削除してみよう」
	右のコードエリアには、4つの要素を持つweaponというListが定義されています。このListの要素から "鉄の剣" を削除してください。
	// Listの要素を削除する
	using System;
	using System.Collections.Generic;
	public class Hello{
	    public static void Main(){
	        var weapon = new List< string >();
	        weapon.Add("木の棒");
	        weapon.Add("鉄の棒");
	        weapon.Add("鉄の剣");
	        weapon.Add("銅の剣");
	        // ここに、要素を削除するコードを記述する
	        weapon.Remove("鉄の剣");
	        foreach (string item in weapon){
	            Console.WriteLine(item);
	        }
	    }
	}
	③演習課題「Listの要素数を出力してみよう」
	右のコードエリアには、weaponというListが定義されています。このListの要素数を出力してください。
	// Listの要素の個数を出力する
	using System;
	using System.Collections.Generic;
	public class Hello{
	    public static void Main(){
	        var weapon = new List< string >();
	        weapon.Add("木の棒");
	        weapon.Add("鉄の棒");
	        weapon.Add("鉄の剣");
	        weapon.Add("石斧");
	        weapon.Add("エクスカリバー");
	        // ここに、要素数を出力するコードを記述する
	        Console.WriteLine(weapon.Count);        //要素数を確認するときは.Count
	    }
	}
</div>

<div style="padding: 100px 0 100px 0;">
	<video src="assets/videos/splitで文字列を分割しよう.mp4" controls preload muted></video><br>
	＃07:splitで文字列を分割しよう 
	ここでは、split処理で文字列を区切って、配列に代入してみたいと思います。
	①このチャプターで使用したメソッド
	Splitメソッド　分割した文字列
	    data.Split(',');
	②考になるWebページ
	方法: String.Split を使用して文字列を解析する (C# プログラミング ガイド)
	https://msdn.microsoft.com/ja-jp/library/ms228388.aspx
	String.Split メソッド (Char[]) (System)
	https://msdn.microsoft.com/ja-jp/library/b873y76a(v=vs.110).aspx

	// splitで文字列を分割してみよう
	using System;
	using System.Collections.Generic;
	public class Hello{
	    public static void Main(){
	        var data = Console.ReadLine();
	        Console.WriteLine(data);        //「,」で区切られているデータ類をCSV
	        string[] array = data.Split(',');   //「,」があったらその前の文字列を1要素として入れる、「,」は加えない
	        foreach (var str in array) {
	            Console.WriteLine(str);
	        }
	    }
	}
	[演習]
	演習課題「文字列をカンマで分割してみよう」
	右のコードエリアには、teamという文字列に、RPGのプレイヤーが、カンマで区切られて代入されています。
	この文字列を、Splitメソッドを使って カンマのところで分割してください。
	// 文字列をカンマで分割する
	using System;
	using System.Collections.Generic;
	public class Program{
	    public static void Main(){
	        var team = "勇者,戦士,忍者,魔法使い";
	        // ここに文字列を分割するコードを記述する
	        string[] array = team.Split(',');
	        foreach (var str in array) {
	            Console.WriteLine(str);
	        }
	    }
	}
	②演習課題「英文の単語数を数えよう」
	右のコードエリアには、ある英文がstrという文字列に代入されています。
	この文字列を、Splitメソッドを使って、スペースのところで分割して、単語の数を出力してください。
	// 英文の単語数を数える
	using System;
	using System.Collections.Generic;
	public class Program{
	    public static void Main(){
	        string str = "One cold rainy day when my father was a little boy he met an old alley cat on his street";
	        // ここに文字列を分割するコードを記述する
	        string[] asobi = str.Split(' ');		//Split(' ')で半角スペースの時要素に入れる
	        int count = asobi.Length;				//Listの際はCount??
	        Console.WriteLine(count);
	    }
	}
	③演習課題「標準入力から読み込んだURLを分割しよう」
	右のコードエリアのプログラムは、入力エリアのURLを読み込みます。
	読み込んだURLを「/」で分割して、配列の各要素をWriteLineメソッドで出力してください。
	// 標準入力から読み込んだURLを分割する
	// https://paiza.jp/cgc/users/ready
	using System;
	using System.Collections.Generic;
	public class Hello{
	    public static void Main(){
	        var url_str = Console.ReadLine();
	        // ここに文字列を分割するコードを記述する
	        string[] url = url_str.Split('/');
	        foreach (var s in url) {            //sは処理内で使う文字列
	            Console.WriteLine(s);
	        }
	    }
	}
</div>

<div style="padding: 100px 0 100px 0;">
	<video src="assets/videos/代入式について詳しく学ぶ.mp4" controls preload muted></video><br>
	＃08:代入式について詳しく学ぶ 
	前回はカンマ区切りで複数のデータを取得しました。今回は代入式の仕組みを理解しながら、取得したデータを利用しましょう。
	① 代入式の評価
	var moji = "";
	if( (moji = Console.ReadLine()) != null ) {
	    Console.WriteLine("文字が入力されたね！");
	} else {
	    Console.WriteLine("残念入力なし");
	}
	②参考になるWebページ
	- C#入門/代入演算子 - WisdomSoft
	http://www.wisdomsoft.jp/65.html
	- C#　演算子 - MSDN - Microsoft
	https://msdn.microsoft.com/ja-jp/library/6a71f45d.aspx
	- if-else (C# リファレンス) - MSDN - Microsoft
	https://msdn.microsoft.com/ja-jp/library/5011f09h.aspx

	//代入式について詳しく学ぶ
	using System;
	using System.Collections;
	public class Hello{
	    public static void Main(){
	        // var a = 0;
	        // var b = 100;
	        // var c = 200;
	        // a = b = c;          //一番右側の値が優先される
	        // Console.WriteLine("aの中身は" + a);
	        // var d = "";
	        // var e = "騎士";
	        // var f = "勇者";
	        // d = (e = f) + "さん";            //e→fになってd→f、その後に"さん"がプラス
	        // Console.WriteLine("dの中身は" + d);
	        // var g = true;
	        // var h = "戦士";
	        // g = (h == "勇者");                          //hが勇者ならgに代入する
	        // Console.WriteLine("g の中身は、" + g);      //hは勇者ではなかったためFalse、「h !=」だったらTrue
	        // if ( g ){                                   //gがtrueなら処理する
	        //     Console.WriteLine("実行されたかな？");
	        // } else {                                    //gがFalseなら処理する
	        //     Console.WriteLine("残念入力なし");
	        // }
	        // 順番に使ってみる
	        var moji = "";
	        var hikaku = false;
	        // moji = Console.ReadLine();
	        hikaku = (moji != null);                 //mojiが空でないならhikakuに代入
	        if( (moji = Console.ReadLine()) != null ) {       //ReadLineをひとつにまとめる
	            Console.WriteLine("文字が入力されたね！");
	        } else {
	            Console.WriteLine("入力なし");
	        }
	    }
	}
	[演習]
	① 演習課題「代入式の順番を理解しよう」
	右のコードエリアには、a、b、cの変数に、それぞれ数値が代入されています。全ての変数と、代入式を上手く使って、aの値が200になるようにしてください。
	//代入式の順番のしくみ
	using System;
	using System.Collections;
	public class Program{
	    public static void Main(){
	        var a =  50;
	        var b = 200;
	        var c = 100;
	        // ここにaの中身が200になるようにコードを記述する
	        a = c = b;
	        Console.WriteLine("aの中身は" + a);
	    }
	}
	②演習課題「括弧を使った代入式の順番を理解しよう」
	右のコードエリアには、d、e、f、gの変数に、それぞれ文字列が代入されています。
	全ての変数と、代入式と、括弧を上手く使って、出力される値が魔法使い侍になるようにしてください。
	//括弧を使った代入式の順番の仕組み
	using System;
	using System.Collections;
	public class Program{
	    public static void Main(){
	        var d = "戦士";
	        var e = "魔法使い";
	        var f = "忍者";
	        var g = "侍";
	        // ここにdの中身が魔法使い侍になるようにコードを記述する
	        d = ( f = e ) + g;          //e→fに代入(fはe)、表示は左側
	        Console.WriteLine("dの中身は" + d);
	    }
	}
	③演習課題「ifを使った代入式を理解しよう」
	右のコードエリアには、g、hの変数に、それぞれ文字列と条件が代入されています。括弧の中を埋めて、値が出力されるようにしてください。
	//ifを使った代入式の仕組み
	using System;
	using System.Collections;
	public class Program{
	    public static void Main(){
	        var g = false;
	        var h = "勇者";
	        // ここに勇者を識別するコードを記述する
	        g = ( h == "勇者" );        //hが勇者だったらgに代入
	        if( g ){
	            Console.WriteLine(g + " あなたは勇者だ");
	        }
	    }
	}
</div>

<div style="padding: 100px 0 100px 0;">
	<video src="assets/videos/複数行データを読み込んでみよう.mp4" controls preload muted></video><br>
		09:複数行データを読み込んでみよう
	このチャプターでは複数行データをリストに入れます。
	while文と組み合わせながら、読み込みについて学んでいきます。
	①複数行データの読み込み
	var team = new List<　string　>();
	string line;
	while ((line=Console.ReadLine()) != null) {
	    team.Add("hello " + line);
	}
	foreach(var str in team) {
	     Console.WriteLine(str);
	}
	②参考になるWebページ
	- C#でテキストファイルから1行ずつ読み込んで配列に格納する
	http://yhei.hatenablog.com/entry/2015/09/25/163213
	- List(T) クラス (System.Collections.Generic) - MSDN - Microsoft
	https://msdn.microsoft.com/ja-jp/library/6sh2ey19(v=vs.110).aspx
	- while (C# リファレンス) - MSDN - Microsoft
	https://msdn.microsoft.com/ja-jp/library/2aeyhxcd.aspx

	using System;
	using System.Collections.Generic;       //Listを使う準備
	public class Program{
	    public static void Main(){
	        // var moji = "";
	        // if( (moji = Console.ReadLine()) != null ) {			//入力内容をmojiに代入、それがnullでないなら
	        //     Console.WriteLine("文字が入力されたね！");
	        // } else {
	        //     Console.WriteLine("残念入力なし");
	        // }
	        var team = new List< string >();		//Listを作りましょう、
	        // Console.WriteLine(team.Count);       //行数の検知
	        string line;                            //lineはただの定義決め
	        while ((line = Console.ReadLine()) != null ) {      //行数がなくなるまで(nullになるまで)繰り返す
	            team.Add("hello " + line);          //「hello 〇〇」でteam配列に加える
	        }
	        foreach(var str in team) {              //teamの要素を表示して、全て出す
	            Console.WriteLine(str);
	        }                                       //空行で出しても「null」ではないため、忍者に飛ぶ
	    }
	}
	[演習]
	①演習課題「標準入力から読み込んだ複数行を出力しよう」
	右のコードエリアのプログラムは、RPGの敵の名前を、入力エリアから複数行データとして読み込んで出力します。
	この文字列を、「＊＊が現れた」という形式でListに追加し、出力してください。
	// 読み込んだ複数行を出力する
	using System;
	using System.Collections.Generic;
	public class Hello{
	    public static void Main(){
	        var enemy = new List< string >();     //enemyというListをつくる
	        string line;                        //lineというstring型を作成
	        while ((line=Console.ReadLine()) != null) {     //lineにReadLineを代入&nullではない
	             enemy.Add(line);               //enemy配列にAddする
	        }
	        foreach(var str in enemy) {         //foreachでまわす
	             Console.WriteLine(str + "が現れた");
	        }
	    }
	}
	[NG,]②演習課題「読み込んだ複数行のカンマ区切りデータを出力しよう」
	右のコードエリアのプログラムは、入力エリアから複数行データとして読み込みます。入力エリアには、RPGの敵の名前Aと匹数Bが、カンマ区切りで用意してあります。
	読み込んだデータをカンマで分割して、「AがB匹現れた」と出力してください。
	// 複数行のカンマ区切りデータを出力する
	using System;
	using System.Collections.Generic;
	public class Hello{
	    public static void Main(){
	        string line;
	        while ((line=Console.ReadLine()) != null) {         //ReadLineなので1行毎で拾ってくる
	            // ここに、文字列を分割して、出力するコードを書く
	            // var enemy = new List<　string　>();
	            // enemy.Add(line.Split(','));      //line.Split('')だと別れてしまう、複数になるためもしいれるとしたら直前でSplitつかったものを入れてwhileする
	            string[] enemy = line.Split(',');               //「,」が出たらその直前を要素に入れる、
	            Console.WriteLine(enemy[0] + "が" + enemy[1] + "匹現れた");     //1行毎で拾うので[0]と[1]でOK
	        }
	    }
	}
</div>

<div style="padding: 100px 0 100px 0;">
	<video src="assets/videos/ランダムくじを作ろう.mp4" controls preload muted></video><br>
	＃10:ランダムくじを作ろう
	最後のチャプターです。今回はランダムくじを作ります。今までの応用/総集編になります。
		①ランダムくじを作ろう
	var data = Console.ReadLine();
	string [] enemies = data.Split(',');
	var num = enemies.Length;
	var random = new Random();
	var rand = random.Next(num);
	var attack = enemies[rand];
	Console.WriteLine(attack + "に会心の一撃！");
	②参考になるWebページ
	- String.Split メソッド (Char[]) (System) - MSDN - Microsoft
	https://msdn.microsoft.com/ja-jp/library/b873y76a(v=vs.110).aspx
	- Random クラス (System) - MSDN - Microsoft
	https://msdn.microsoft.com/ja-jp/library/system.random(v=vs.110).aspx

	using System;
	public class Hello{
	    public static void Main(){
	        var data = Console.ReadLine();
	        string[] team = data.Split(',');        //勇者一行
	        data = Console.ReadLine();              //2回目のdataの時はvarいらない
	        string [] enemies = data.Split(',');        //,区切りの時はSplitを使って配列に入れる
	        foreach (var str in enemies) {
	            Console.WriteLine(str + "が現れた！");    //1行ごとに表示
	        }
	        var num = enemies.Length;       //配列の大きさを表示
	        Console.WriteLine("敵は" + num + "匹");     //敵の数
	        var random = new Random();      //Randomでインスタンスを作成
	        var rand = 0;                   //
	        //var attack = enemies[rand];     //ランダムに得られた数値に対応する敵をenemies配列から取り出し、attack変数に代入する
	        var attack = "";
	        foreach (var str in team) {         //teamのメンバーが1人ずつランダムで敵に攻撃する
	            rand = random.Next(num);        //敵の数からランダムで数を1つrandに代入
	            attack = enemies[rand];         //randの敵をattackに代入、敵を指定するような感じ
	            Console.WriteLine(str + "の攻撃！");            //メンバー
	            Console.WriteLine(attack + "に会心の一撃！");   //攻撃するモンスター
	        }
	    }
	}

	[演習]
	①演習課題「じゃんけんプログラムを作ろう」
	入力エリアに、じゃんけんの手(例：グー,チョキ,パー)が用意してあります。
	右のコードエリアのコメントを参考にして、じゃんけんプログラムを作ってください。じゃんけんの手は、標準入力から読み込んだ文字列をカンマで分割して、そのうち1つをランダムに出力します。このときのじゃんけんの結果を出力してください。
	// じゃんけんプログラム
	using System;
	using System.Collections.Generic;
	public class Hello{
	    public static void Main(){
	        string line = Console.ReadLine();   // 標準入力から1行取得
	        string[] janken = line.Split(',');  // カンマで分割して、配列に代入
	        var random = new Random();          // 配列の要素をランダムに選ぶ
	        // var jan = janken.Length;         //janでLengthを入れても可
	        var num = random.Next(janken.Length);            // jankenの配列数=3未満を入れて、ランダムでひとつ表示
	        Console.WriteLine(janken[num]);     // ランダムに選んだ配列の要素を出力
	        // Console.WriteLine(string.Join("11",janken));    //全て表示はstring.Loin("", 変数)で表示できる
	    }
	}
	②演習課題「おみくじを作ろう」
	入力エリアに、おみくじの出目(例：大吉,中吉,吉,凶)が用意してあります。右のコードエリアに、おみくじプログラムを作ってください。
	おみくじは、標準入力から読み込んだ文字列をカンマで分割して、そのうち1つをランダムに出力します。このときのおみくじの結果を出力してください。
	// おみくじプログラム
	using System;
	using System.Collections.Generic;
	public class Hello{
	    public static void Main(){
	        string line = Console.ReadLine();       // 標準入力から1行取得
	        string[] omikuji = line.Split(',');     // カンマで分割して、配列に代入
	        var random = new Random();              // 配列の要素をランダムに選ぶ
	        var num = random.Next(omikuji.Length);  // omikujiの数＝4未満の数をランダム1つ選択
	        Console.WriteLine(omikuji[num]);        // ランダムに選んだ配列の要素を出力
	    }
	}
</div>

<div style="padding: 100px 0 100px 0;">
	<video src="assets/videos/コメントでプログラムを見やすく！.mp4" controls preload muted></video><br>
</div>


<div style="padding: 100px 0 100px 0;">
next→<%= link_to 'Paiza/C#コース5', csharp_part5_path %><br>
Home→<%= link_to 'Home', root_path %>
</div>